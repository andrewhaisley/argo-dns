//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
#pragma once

/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "dns_rr.hpp"

namespace adns
{
    /**
     * DNS resource record type CSYNC (type number 62)
     */
    class dns_rr_CSYNC final : public dns_rr
    {
    public:

        /**
         * Constructor 
         */
        dns_rr_CSYNC();

        /**
         * Destructor 
         */
        virtual ~dns_rr_CSYNC();

        /**
         * make a copy 
         */
        virtual dns_rr *clone();

        /**
         * set methods
         */
        void set_soa_serial(uint soa_serial);
        void set_flags(unsigned short flags);
        void set_type_bitmap(const std::shared_ptr<dns_type_bitmap> &type_bitmap);

        /**
         * get methods
         */
        uint get_soa_serial() const;
        unsigned short get_flags() const;
        const std::shared_ptr<dns_type_bitmap> &get_type_bitmap() const;

        /**
         * dump out for debug
         */
        virtual void dump() const;

        /**
         * turn into a string for logging/debug/comparison
         */
        virtual std::string to_string() const;

        /**
         * turn into a string for logging/debug/comparison with no TTL
         */
        virtual std::string to_string_no_ttl() const;

    protected:

        /**
         * serialize into a json object
         */
        virtual void json_serialize() const;

        /**
         * unserialize from a json object
         */
        virtual void json_unserialize();

    private:

        uint m_soa_serial;
        unsigned short m_flags;
        std::shared_ptr<dns_type_bitmap> m_type_bitmap;

    };
}
