// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "types.hpp"
#include "util.hpp"
#include "buffer.hpp"
#include "dns_type_bitmap.hpp"
#include "dns_rr_TLSA.hpp"

using namespace adns;
using namespace std;

dns_rr_TLSA::dns_rr_TLSA() : dns_rr()
{
    set_type(dns_rr::T_TLSA_e);
}

dns_rr_TLSA::~dns_rr_TLSA()
{
}

dns_rr *dns_rr_TLSA::clone()
{
    return new dns_rr_TLSA(*this);
}

void dns_rr_TLSA::json_serialize() const
{
    dns_rr::json_serialize();
    set_json("certifcate_usage", int(get_certifcate_usage()));
    set_json("selector", int(get_selector()));
    set_json("matching_type", int(get_matching_type()));
    set_json("certificate_association", util::tohex(get_certificate_association()));

}

void dns_rr_TLSA::json_unserialize() 
{
    m_certifcate_usage = int((*m_json_object)["certifcate_usage"]);
    m_selector = int((*m_json_object)["selector"]);
    m_matching_type = int((*m_json_object)["matching_type"]);
    m_certificate_association = util::fromhex((*m_json_object)["certificate_association"]);

}

void dns_rr_TLSA::set_certifcate_usage(octet certifcate_usage)
{
    m_certifcate_usage = certifcate_usage;
}
void dns_rr_TLSA::set_selector(octet selector)
{
    m_selector = selector;
}
void dns_rr_TLSA::set_matching_type(octet matching_type)
{
    m_matching_type = matching_type;
}
void dns_rr_TLSA::set_certificate_association(const buffer &certificate_association)
{
    m_certificate_association = certificate_association;
}

octet dns_rr_TLSA::get_certifcate_usage() const
{
    return m_certifcate_usage;
}
octet dns_rr_TLSA::get_selector() const
{
    return m_selector;
}
octet dns_rr_TLSA::get_matching_type() const
{
    return m_matching_type;
}
const buffer &dns_rr_TLSA::get_certificate_association() const
{
    return m_certificate_association;
}


void dns_rr_TLSA::dump() const
{
    LOG(debug) << to_string();
}

string dns_rr_TLSA::to_string() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_ttl()) + " " + boost::lexical_cast<string>(int(get_certifcate_usage())) + " " + boost::lexical_cast<string>(int(get_selector())) + " " + boost::lexical_cast<string>(int(get_matching_type())) + " " + util::tohex(get_certificate_association());
}

string dns_rr_TLSA::to_string_no_ttl() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(int(get_certifcate_usage())) + " " + boost::lexical_cast<string>(int(get_selector())) + " " + boost::lexical_cast<string>(int(get_matching_type())) + " " + util::tohex(get_certificate_association());
}
