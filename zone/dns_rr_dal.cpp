// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include "types.hpp"
#include "connection_pool.hpp"
#include "util.hpp"
#include "dns_rr_dal.hpp"
#include "dns_type_bitmap.hpp"

#include "dns_rr_SOA.hpp"
#include "row_rr_soa.hpp"
#include "dns_rr_A.hpp"
#include "row_rr_a.hpp"
#include "dns_rr_AAAA.hpp"
#include "row_rr_aaaa.hpp"
#include "dns_rr_AFSDB.hpp"
#include "row_rr_afsdb.hpp"
#include "dns_rr_NS.hpp"
#include "row_rr_ns.hpp"
#include "dns_rr_MX.hpp"
#include "row_rr_mx.hpp"
#include "dns_rr_CNAME.hpp"
#include "row_rr_cname.hpp"
#include "dns_rr_DNAME.hpp"
#include "row_rr_dname.hpp"
#include "dns_rr_PTR.hpp"
#include "row_rr_ptr.hpp"
#include "dns_rr_TXT.hpp"
#include "row_rr_txt.hpp"
#include "dns_rr_NAPTR.hpp"
#include "row_rr_naptr.hpp"
#include "dns_rr_KX.hpp"
#include "row_rr_kx.hpp"
#include "dns_rr_OPT.hpp"
#include "dns_rr_SRV.hpp"
#include "row_rr_srv.hpp"
#include "dns_rr_HINFO.hpp"
#include "row_rr_hinfo.hpp"
#include "dns_rr_SVCB.hpp"
#include "row_rr_svcb.hpp"
#include "dns_rr_IPSECKEY.hpp"
#include "row_rr_ipseckey.hpp"
#include "dns_rr_LOC.hpp"
#include "row_rr_loc.hpp"
#include "dns_rr_HTTPS.hpp"
#include "row_rr_https.hpp"
#include "dns_rr_CAA.hpp"
#include "row_rr_caa.hpp"
#include "dns_rr_ZONEMD.hpp"
#include "row_rr_zonemd.hpp"
#include "dns_rr_URI.hpp"
#include "row_rr_uri.hpp"
#include "dns_rr_SSHFP.hpp"
#include "row_rr_sshfp.hpp"
#include "dns_rr_TLSA.hpp"
#include "row_rr_tlsa.hpp"
#include "dns_rr_OPENPGPKEY.hpp"
#include "row_rr_openpgpkey.hpp"
#include "dns_rr_DHCID.hpp"
#include "row_rr_dhcid.hpp"
#include "dns_rr_CERT.hpp"
#include "row_rr_cert.hpp"
#include "dns_rr_EUI48.hpp"
#include "row_rr_eui48.hpp"
#include "dns_rr_EUI64.hpp"
#include "row_rr_eui64.hpp"
#include "dns_rr_CSYNC.hpp"
#include "row_rr_csync.hpp"
#include "dns_rr_TKEY.hpp"
#include "dns_rr_TSIG.hpp"
#include "dns_rr_GENERIC.hpp"
#include "row_rr_generic.hpp"


using namespace std;
using namespace adns;
using namespace adns::db;
using namespace boost::log::trivial;

int dns_rr_dal::NUM_RESOURCE_RECORD_TYPES = 30;

dns_rr::type_t dns_rr_dal::rr_types[] = {dns_rr::T_SOA_e, dns_rr::T_A_e, dns_rr::T_AAAA_e, dns_rr::T_AFSDB_e, dns_rr::T_NS_e, dns_rr::T_MX_e, dns_rr::T_CNAME_e, dns_rr::T_DNAME_e, dns_rr::T_PTR_e, dns_rr::T_TXT_e, dns_rr::T_NAPTR_e, dns_rr::T_KX_e, dns_rr::T_SRV_e, dns_rr::T_HINFO_e, dns_rr::T_SVCB_e, dns_rr::T_IPSECKEY_e, dns_rr::T_LOC_e, dns_rr::T_HTTPS_e, dns_rr::T_CAA_e, dns_rr::T_ZONEMD_e, dns_rr::T_URI_e, dns_rr::T_SSHFP_e, dns_rr::T_TLSA_e, dns_rr::T_OPENPGPKEY_e, dns_rr::T_DHCID_e, dns_rr::T_CERT_e, dns_rr::T_EUI48_e, dns_rr::T_EUI64_e, dns_rr::T_CSYNC_e, dns_rr::T_GENERIC_e};

void dns_rr_dal::read_resource_records(uuid zid, dns_rr::type_t t, list<shared_ptr<dns_rr>> &res)
{
    auto conn = connection_pool::get_connection();

    res.clear();

    switch (t)
    {
        case dns_rr::T_SOA_e:
            {
                for (auto row : row_rr_soa::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_SOA>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_soa_id());
                    rr->set_zone_id(zid);
                    rr->set_mname(std::make_shared<dns_name>(row->get_mname()));
                    rr->set_rname(std::make_shared<dns_name>(row->get_rname()));
                    rr->set_serial(row->get_serial());
                    rr->set_refresh(row->get_refresh());
                    rr->set_retry(row->get_retry());
                    rr->set_expire(row->get_expire());
                    rr->set_minimum(row->get_minimum());
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_A_e:
            {
                for (auto row : row_rr_a::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_A>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_a_id());
                    rr->set_zone_id(zid);
                    rr->set_ip4_addr(ip_address(row->get_ip4_addr()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_AAAA_e:
            {
                for (auto row : row_rr_aaaa::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_AAAA>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_aaaa_id());
                    rr->set_zone_id(zid);
                    rr->set_ip6_addr(ip_address(row->get_ip6_addr()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_AFSDB_e:
            {
                for (auto row : row_rr_afsdb::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_AFSDB>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_afsdb_id());
                    rr->set_zone_id(zid);
                    rr->set_subtype(row->get_subtype());
                    rr->set_hostname(std::make_shared<dns_name>(row->get_hostname()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_NS_e:
            {
                for (auto row : row_rr_ns::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_NS>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_ns_id());
                    rr->set_zone_id(zid);
                    rr->set_nsdname(std::make_shared<dns_name>(row->get_nsdname()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_MX_e:
            {
                for (auto row : row_rr_mx::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_MX>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_mx_id());
                    rr->set_zone_id(zid);
                    rr->set_preference(row->get_preference());
                    rr->set_exchange(std::make_shared<dns_name>(row->get_exchange()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_CNAME_e:
            {
                for (auto row : row_rr_cname::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_CNAME>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_cname_id());
                    rr->set_zone_id(zid);
                    rr->set_cname(std::make_shared<dns_name>(row->get_cname()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_DNAME_e:
            {
                for (auto row : row_rr_dname::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_DNAME>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_dname_id());
                    rr->set_zone_id(zid);
                    rr->set_dname(std::make_shared<dns_name>(row->get_dname()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_PTR_e:
            {
                for (auto row : row_rr_ptr::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_PTR>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_ptr_id());
                    rr->set_zone_id(zid);
                    rr->set_dname(std::make_shared<dns_name>(row->get_dname()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_TXT_e:
            {
                for (auto row : row_rr_txt::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_TXT>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_txt_id());
                    rr->set_zone_id(zid);
                    rr->set_txt(std::make_shared<dns_txt>(row->get_txt()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_NAPTR_e:
            {
                for (auto row : row_rr_naptr::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_NAPTR>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_naptr_id());
                    rr->set_zone_id(zid);
                    rr->set_naptr_order(row->get_naptr_order());
                    rr->set_preference(row->get_preference());
                    rr->set_flags(std::make_shared<dns_label>(row->get_flags()));
                    rr->set_services(std::make_shared<dns_label>(row->get_services()));
                    rr->set_naptr_regexp(std::make_shared<dns_label>(row->get_naptr_regexp()));
                    rr->set_replacement(std::make_shared<dns_name>(row->get_replacement()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_KX_e:
            {
                for (auto row : row_rr_kx::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_KX>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_kx_id());
                    rr->set_zone_id(zid);
                    rr->set_preference(row->get_preference());
                    rr->set_exchanger(std::make_shared<dns_name>(row->get_exchanger()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_SRV_e:
            {
                for (auto row : row_rr_srv::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_SRV>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_srv_id());
                    rr->set_zone_id(zid);
                    rr->set_priority(row->get_priority());
                    rr->set_weight(row->get_weight());
                    rr->set_port(row->get_port());
                    rr->set_target(std::make_shared<dns_name>(row->get_target()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_HINFO_e:
            {
                for (auto row : row_rr_hinfo::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_HINFO>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_hinfo_id());
                    rr->set_zone_id(zid);
                    rr->set_cpu(std::make_shared<dns_label>(row->get_cpu()));
                    rr->set_os(std::make_shared<dns_label>(row->get_os()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_SVCB_e:
            {
                for (auto row : row_rr_svcb::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_SVCB>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_svcb_id());
                    rr->set_zone_id(zid);
                    rr->set_priority(row->get_priority());
                    rr->set_target(std::make_shared<dns_name>(row->get_target()));
                    rr->set_svcparams(std::make_shared<dns_svcparams>(row->get_svcparams()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_IPSECKEY_e:
            {
                for (auto row : row_rr_ipseckey::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_IPSECKEY>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_ipseckey_id());
                    rr->set_zone_id(zid);
                    rr->set_ipseckey(std::make_shared<dns_ipseckey>(row->get_ipseckey()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_LOC_e:
            {
                for (auto row : row_rr_loc::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_LOC>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_loc_id());
                    rr->set_zone_id(zid);
                    rr->set_version(row->get_version());
                    rr->set_size(row->get_size());
                    rr->set_horizontal_precision(row->get_horizontal_precision());
                    rr->set_vertical_precision(row->get_vertical_precision());
                    rr->set_latitude(row->get_latitude());
                    rr->set_longitude(row->get_longitude());
                    rr->set_altitude(row->get_altitude());
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_HTTPS_e:
            {
                for (auto row : row_rr_https::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_HTTPS>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_https_id());
                    rr->set_zone_id(zid);
                    rr->set_priority(row->get_priority());
                    rr->set_target(std::make_shared<dns_name>(row->get_target()));
                    rr->set_svcparams(std::make_shared<dns_svcparams>(row->get_svcparams()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_CAA_e:
            {
                for (auto row : row_rr_caa::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_CAA>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_caa_id());
                    rr->set_zone_id(zid);
                    rr->set_flags(row->get_flags());
                    rr->set_tag(std::make_shared<dns_label>(row->get_tag()));
                    rr->set_contents(util::frombase64(row->get_contents()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_ZONEMD_e:
            {
                for (auto row : row_rr_zonemd::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_ZONEMD>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_zonemd_id());
                    rr->set_zone_id(zid);
                    rr->set_soa_serial(row->get_soa_serial());
                    rr->set_scheme(row->get_scheme());
                    rr->set_algorithm(row->get_algorithm());
                    rr->set_digest(util::fromhex(row->get_digest()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_URI_e:
            {
                for (auto row : row_rr_uri::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_URI>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_uri_id());
                    rr->set_zone_id(zid);
                    rr->set_priority(row->get_priority());
                    rr->set_weight(row->get_weight());
                    rr->set_target(row->get_target());
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_SSHFP_e:
            {
                for (auto row : row_rr_sshfp::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_SSHFP>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_sshfp_id());
                    rr->set_zone_id(zid);
                    rr->set_algorithm(row->get_algorithm());
                    rr->set_fp_type(row->get_fp_type());
                    rr->set_fingerprint(util::fromhex(row->get_fingerprint()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_TLSA_e:
            {
                for (auto row : row_rr_tlsa::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_TLSA>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_tlsa_id());
                    rr->set_zone_id(zid);
                    rr->set_certifcate_usage(row->get_certifcate_usage());
                    rr->set_selector(row->get_selector());
                    rr->set_matching_type(row->get_matching_type());
                    rr->set_certificate_association(util::fromhex(row->get_certificate_association()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_OPENPGPKEY_e:
            {
                for (auto row : row_rr_openpgpkey::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_OPENPGPKEY>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_openpgpkey_id());
                    rr->set_zone_id(zid);
                    rr->set_pgpkey(util::frombase64(row->get_pgpkey()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_DHCID_e:
            {
                for (auto row : row_rr_dhcid::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_DHCID>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_dhcid_id());
                    rr->set_zone_id(zid);
                    rr->set_contents(util::frombase64(row->get_contents()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_CERT_e:
            {
                for (auto row : row_rr_cert::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_CERT>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_cert_id());
                    rr->set_zone_id(zid);
                    rr->set_certificate_type(row->get_certificate_type());
                    rr->set_key_tag(row->get_key_tag());
                    rr->set_algorithm(row->get_algorithm());
                    rr->set_certificate(util::frombase64(row->get_certificate()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_EUI48_e:
            {
                for (auto row : row_rr_eui48::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_EUI48>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_eui48_id());
                    rr->set_zone_id(zid);
                    rr->set_eui48(eui48(row->get_eui48()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_EUI64_e:
            {
                for (auto row : row_rr_eui64::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_EUI64>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_eui64_id());
                    rr->set_zone_id(zid);
                    rr->set_eui64(eui64(row->get_eui64()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_CSYNC_e:
            {
                for (auto row : row_rr_csync::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_CSYNC>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_csync_id());
                    rr->set_zone_id(zid);
                    rr->set_soa_serial(row->get_soa_serial());
                    rr->set_flags(row->get_flags());
                    rr->set_type_bitmap(std::make_shared<dns_type_bitmap>(row->get_type_bitmap()));
                    res.push_back(rr);
                }
            }
            break;
        case dns_rr::T_GENERIC_e:
            {
                for (auto row : row_rr_generic::get_by_zone_id(*conn, zid))
                {
                    auto rr = make_shared<dns_rr_GENERIC>();
                    rr->set_name(make_shared<dns_name>(row->get_name()));
                    rr->set_ttl(row->get_ttl());
                    rr->set_id(row->get_rr_generic_id());
                    rr->set_zone_id(zid);
                    rr->set_contents(util::frombase64(row->get_contents()));
                    res.push_back(rr);
                }
            }
            break;

    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::delete_resource_records(connection &conn, uuid zid, dns_rr::type_t t)
{
    switch (t)
    {
    case dns_rr::T_SOA_e:
        row_rr_soa::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_A_e:
        row_rr_a::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_AAAA_e:
        row_rr_aaaa::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_AFSDB_e:
        row_rr_afsdb::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_NS_e:
        row_rr_ns::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_MX_e:
        row_rr_mx::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_CNAME_e:
        row_rr_cname::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_DNAME_e:
        row_rr_dname::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_PTR_e:
        row_rr_ptr::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_TXT_e:
        row_rr_txt::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_NAPTR_e:
        row_rr_naptr::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_KX_e:
        row_rr_kx::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_SRV_e:
        row_rr_srv::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_HINFO_e:
        row_rr_hinfo::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_SVCB_e:
        row_rr_svcb::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_IPSECKEY_e:
        row_rr_ipseckey::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_LOC_e:
        row_rr_loc::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_HTTPS_e:
        row_rr_https::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_CAA_e:
        row_rr_caa::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_ZONEMD_e:
        row_rr_zonemd::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_URI_e:
        row_rr_uri::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_SSHFP_e:
        row_rr_sshfp::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_TLSA_e:
        row_rr_tlsa::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_OPENPGPKEY_e:
        row_rr_openpgpkey::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_DHCID_e:
        row_rr_dhcid::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_CERT_e:
        row_rr_cert::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_EUI48_e:
        row_rr_eui48::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_EUI64_e:
        row_rr_eui64::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_CSYNC_e:
        row_rr_csync::delete_by_zone_id(conn, zid);
        break;
    case dns_rr::T_GENERIC_e:
        row_rr_generic::delete_by_zone_id(conn, zid);
        break;

    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::insert_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
            case dns_rr::T_SOA_e:
            {
                dns_rr_SOA *r = dynamic_cast<dns_rr_SOA*>(rr.get());
                row_rr_soa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_mname(r->get_mname()->to_string());
                row.set_rname(r->get_rname()->to_string());
                row.set_serial(r->get_serial());
                row.set_refresh(r->get_refresh());
                row.set_retry(r->get_retry());
                row.set_expire(r->get_expire());
                row.set_minimum(r->get_minimum());
                row.set_ttl(r->get_ttl());
                row.set_rr_soa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_A_e:
            {
                dns_rr_A *r = dynamic_cast<dns_rr_A*>(rr.get());
                row_rr_a row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ip4_addr(r->get_ip4_addr().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_a_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_AAAA_e:
            {
                dns_rr_AAAA *r = dynamic_cast<dns_rr_AAAA*>(rr.get());
                row_rr_aaaa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ip6_addr(r->get_ip6_addr().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_aaaa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_AFSDB_e:
            {
                dns_rr_AFSDB *r = dynamic_cast<dns_rr_AFSDB*>(rr.get());
                row_rr_afsdb row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_subtype(r->get_subtype());
                row.set_hostname(r->get_hostname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_afsdb_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_NS_e:
            {
                dns_rr_NS *r = dynamic_cast<dns_rr_NS*>(rr.get());
                row_rr_ns row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_nsdname(r->get_nsdname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ns_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_MX_e:
            {
                dns_rr_MX *r = dynamic_cast<dns_rr_MX*>(rr.get());
                row_rr_mx row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_preference(r->get_preference());
                row.set_exchange(r->get_exchange()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_mx_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_CNAME_e:
            {
                dns_rr_CNAME *r = dynamic_cast<dns_rr_CNAME*>(rr.get());
                row_rr_cname row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_cname(r->get_cname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_cname_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_DNAME_e:
            {
                dns_rr_DNAME *r = dynamic_cast<dns_rr_DNAME*>(rr.get());
                row_rr_dname row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_dname(r->get_dname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_dname_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_PTR_e:
            {
                dns_rr_PTR *r = dynamic_cast<dns_rr_PTR*>(rr.get());
                row_rr_ptr row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_dname(r->get_dname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ptr_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_TXT_e:
            {
                dns_rr_TXT *r = dynamic_cast<dns_rr_TXT*>(rr.get());
                row_rr_txt row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_txt(r->get_txt()->to_base64());
                row.set_ttl(r->get_ttl());
                row.set_rr_txt_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_NAPTR_e:
            {
                dns_rr_NAPTR *r = dynamic_cast<dns_rr_NAPTR*>(rr.get());
                row_rr_naptr row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_naptr_order(r->get_naptr_order());
                row.set_preference(r->get_preference());
                row.set_flags(r->get_flags()->to_string());
                row.set_services(r->get_services()->to_string());
                row.set_naptr_regexp(r->get_naptr_regexp()->to_string());
                row.set_replacement(r->get_replacement()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_naptr_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_KX_e:
            {
                dns_rr_KX *r = dynamic_cast<dns_rr_KX*>(rr.get());
                row_rr_kx row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_preference(r->get_preference());
                row.set_exchanger(r->get_exchanger()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_kx_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_SRV_e:
            {
                dns_rr_SRV *r = dynamic_cast<dns_rr_SRV*>(rr.get());
                row_rr_srv row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_weight(r->get_weight());
                row.set_port(r->get_port());
                row.set_target(r->get_target()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_srv_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_HINFO_e:
            {
                dns_rr_HINFO *r = dynamic_cast<dns_rr_HINFO*>(rr.get());
                row_rr_hinfo row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_cpu(r->get_cpu()->to_string());
                row.set_os(r->get_os()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_hinfo_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_SVCB_e:
            {
                dns_rr_SVCB *r = dynamic_cast<dns_rr_SVCB*>(rr.get());
                row_rr_svcb row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_target(r->get_target()->to_string());
                row.set_svcparams(r->get_svcparams()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_svcb_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_IPSECKEY_e:
            {
                dns_rr_IPSECKEY *r = dynamic_cast<dns_rr_IPSECKEY*>(rr.get());
                row_rr_ipseckey row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ipseckey(r->get_ipseckey()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ipseckey_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_LOC_e:
            {
                dns_rr_LOC *r = dynamic_cast<dns_rr_LOC*>(rr.get());
                row_rr_loc row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_version(r->get_version());
                row.set_size(r->get_size());
                row.set_horizontal_precision(r->get_horizontal_precision());
                row.set_vertical_precision(r->get_vertical_precision());
                row.set_latitude(r->get_latitude());
                row.set_longitude(r->get_longitude());
                row.set_altitude(r->get_altitude());
                row.set_ttl(r->get_ttl());
                row.set_rr_loc_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_HTTPS_e:
            {
                dns_rr_HTTPS *r = dynamic_cast<dns_rr_HTTPS*>(rr.get());
                row_rr_https row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_target(r->get_target()->to_string());
                row.set_svcparams(r->get_svcparams()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_https_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_CAA_e:
            {
                dns_rr_CAA *r = dynamic_cast<dns_rr_CAA*>(rr.get());
                row_rr_caa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_flags(r->get_flags());
                row.set_tag(r->get_tag()->to_string());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_caa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_ZONEMD_e:
            {
                dns_rr_ZONEMD *r = dynamic_cast<dns_rr_ZONEMD*>(rr.get());
                row_rr_zonemd row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_soa_serial(r->get_soa_serial());
                row.set_scheme(r->get_scheme());
                row.set_algorithm(r->get_algorithm());
                row.set_digest(util::tohex(r->get_digest()));
                row.set_ttl(r->get_ttl());
                row.set_rr_zonemd_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_URI_e:
            {
                dns_rr_URI *r = dynamic_cast<dns_rr_URI*>(rr.get());
                row_rr_uri row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_weight(r->get_weight());
                row.set_target(r->get_target());
                row.set_ttl(r->get_ttl());
                row.set_rr_uri_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_SSHFP_e:
            {
                dns_rr_SSHFP *r = dynamic_cast<dns_rr_SSHFP*>(rr.get());
                row_rr_sshfp row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_algorithm(r->get_algorithm());
                row.set_fp_type(r->get_fp_type());
                row.set_fingerprint(util::tohex(r->get_fingerprint()));
                row.set_ttl(r->get_ttl());
                row.set_rr_sshfp_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_TLSA_e:
            {
                dns_rr_TLSA *r = dynamic_cast<dns_rr_TLSA*>(rr.get());
                row_rr_tlsa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_certifcate_usage(r->get_certifcate_usage());
                row.set_selector(r->get_selector());
                row.set_matching_type(r->get_matching_type());
                row.set_certificate_association(util::tohex(r->get_certificate_association()));
                row.set_ttl(r->get_ttl());
                row.set_rr_tlsa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_OPENPGPKEY_e:
            {
                dns_rr_OPENPGPKEY *r = dynamic_cast<dns_rr_OPENPGPKEY*>(rr.get());
                row_rr_openpgpkey row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_pgpkey(util::tobase64(r->get_pgpkey()));
                row.set_ttl(r->get_ttl());
                row.set_rr_openpgpkey_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_DHCID_e:
            {
                dns_rr_DHCID *r = dynamic_cast<dns_rr_DHCID*>(rr.get());
                row_rr_dhcid row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_dhcid_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_CERT_e:
            {
                dns_rr_CERT *r = dynamic_cast<dns_rr_CERT*>(rr.get());
                row_rr_cert row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_certificate_type(r->get_certificate_type());
                row.set_key_tag(r->get_key_tag());
                row.set_algorithm(r->get_algorithm());
                row.set_certificate(util::tobase64(r->get_certificate()));
                row.set_ttl(r->get_ttl());
                row.set_rr_cert_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_EUI48_e:
            {
                dns_rr_EUI48 *r = dynamic_cast<dns_rr_EUI48*>(rr.get());
                row_rr_eui48 row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_eui48(r->get_eui48().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_eui48_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_EUI64_e:
            {
                dns_rr_EUI64 *r = dynamic_cast<dns_rr_EUI64*>(rr.get());
                row_rr_eui64 row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_eui64(r->get_eui64().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_eui64_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_CSYNC_e:
            {
                dns_rr_CSYNC *r = dynamic_cast<dns_rr_CSYNC*>(rr.get());
                row_rr_csync row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_soa_serial(r->get_soa_serial());
                row.set_flags(r->get_flags());
                row.set_type_bitmap(r->get_type_bitmap()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_csync_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;
            case dns_rr::T_GENERIC_e:
            {
                dns_rr_GENERIC *r = dynamic_cast<dns_rr_GENERIC*>(rr.get());
                row_rr_generic row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_generic_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.insert_row(conn);
            }
            break;

    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::update_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
            case dns_rr::T_SOA_e:
            {
                dns_rr_SOA *r = dynamic_cast<dns_rr_SOA*>(rr.get());
                row_rr_soa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_mname(r->get_mname()->to_string());
                row.set_rname(r->get_rname()->to_string());
                row.set_serial(r->get_serial());
                row.set_refresh(r->get_refresh());
                row.set_retry(r->get_retry());
                row.set_expire(r->get_expire());
                row.set_minimum(r->get_minimum());
                row.set_ttl(r->get_ttl());
                row.set_rr_soa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_A_e:
            {
                dns_rr_A *r = dynamic_cast<dns_rr_A*>(rr.get());
                row_rr_a row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ip4_addr(r->get_ip4_addr().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_a_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_AAAA_e:
            {
                dns_rr_AAAA *r = dynamic_cast<dns_rr_AAAA*>(rr.get());
                row_rr_aaaa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ip6_addr(r->get_ip6_addr().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_aaaa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_AFSDB_e:
            {
                dns_rr_AFSDB *r = dynamic_cast<dns_rr_AFSDB*>(rr.get());
                row_rr_afsdb row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_subtype(r->get_subtype());
                row.set_hostname(r->get_hostname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_afsdb_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_NS_e:
            {
                dns_rr_NS *r = dynamic_cast<dns_rr_NS*>(rr.get());
                row_rr_ns row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_nsdname(r->get_nsdname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ns_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_MX_e:
            {
                dns_rr_MX *r = dynamic_cast<dns_rr_MX*>(rr.get());
                row_rr_mx row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_preference(r->get_preference());
                row.set_exchange(r->get_exchange()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_mx_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_CNAME_e:
            {
                dns_rr_CNAME *r = dynamic_cast<dns_rr_CNAME*>(rr.get());
                row_rr_cname row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_cname(r->get_cname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_cname_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_DNAME_e:
            {
                dns_rr_DNAME *r = dynamic_cast<dns_rr_DNAME*>(rr.get());
                row_rr_dname row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_dname(r->get_dname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_dname_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_PTR_e:
            {
                dns_rr_PTR *r = dynamic_cast<dns_rr_PTR*>(rr.get());
                row_rr_ptr row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_dname(r->get_dname()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ptr_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_TXT_e:
            {
                dns_rr_TXT *r = dynamic_cast<dns_rr_TXT*>(rr.get());
                row_rr_txt row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_txt(r->get_txt()->to_base64());
                row.set_ttl(r->get_ttl());
                row.set_rr_txt_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_NAPTR_e:
            {
                dns_rr_NAPTR *r = dynamic_cast<dns_rr_NAPTR*>(rr.get());
                row_rr_naptr row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_naptr_order(r->get_naptr_order());
                row.set_preference(r->get_preference());
                row.set_flags(r->get_flags()->to_string());
                row.set_services(r->get_services()->to_string());
                row.set_naptr_regexp(r->get_naptr_regexp()->to_string());
                row.set_replacement(r->get_replacement()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_naptr_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_KX_e:
            {
                dns_rr_KX *r = dynamic_cast<dns_rr_KX*>(rr.get());
                row_rr_kx row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_preference(r->get_preference());
                row.set_exchanger(r->get_exchanger()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_kx_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_SRV_e:
            {
                dns_rr_SRV *r = dynamic_cast<dns_rr_SRV*>(rr.get());
                row_rr_srv row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_weight(r->get_weight());
                row.set_port(r->get_port());
                row.set_target(r->get_target()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_srv_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_HINFO_e:
            {
                dns_rr_HINFO *r = dynamic_cast<dns_rr_HINFO*>(rr.get());
                row_rr_hinfo row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_cpu(r->get_cpu()->to_string());
                row.set_os(r->get_os()->to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_hinfo_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_SVCB_e:
            {
                dns_rr_SVCB *r = dynamic_cast<dns_rr_SVCB*>(rr.get());
                row_rr_svcb row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_target(r->get_target()->to_string());
                row.set_svcparams(r->get_svcparams()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_svcb_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_IPSECKEY_e:
            {
                dns_rr_IPSECKEY *r = dynamic_cast<dns_rr_IPSECKEY*>(rr.get());
                row_rr_ipseckey row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_ipseckey(r->get_ipseckey()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_ipseckey_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_LOC_e:
            {
                dns_rr_LOC *r = dynamic_cast<dns_rr_LOC*>(rr.get());
                row_rr_loc row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_version(r->get_version());
                row.set_size(r->get_size());
                row.set_horizontal_precision(r->get_horizontal_precision());
                row.set_vertical_precision(r->get_vertical_precision());
                row.set_latitude(r->get_latitude());
                row.set_longitude(r->get_longitude());
                row.set_altitude(r->get_altitude());
                row.set_ttl(r->get_ttl());
                row.set_rr_loc_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_HTTPS_e:
            {
                dns_rr_HTTPS *r = dynamic_cast<dns_rr_HTTPS*>(rr.get());
                row_rr_https row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_target(r->get_target()->to_string());
                row.set_svcparams(r->get_svcparams()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_https_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_CAA_e:
            {
                dns_rr_CAA *r = dynamic_cast<dns_rr_CAA*>(rr.get());
                row_rr_caa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_flags(r->get_flags());
                row.set_tag(r->get_tag()->to_string());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_caa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_ZONEMD_e:
            {
                dns_rr_ZONEMD *r = dynamic_cast<dns_rr_ZONEMD*>(rr.get());
                row_rr_zonemd row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_soa_serial(r->get_soa_serial());
                row.set_scheme(r->get_scheme());
                row.set_algorithm(r->get_algorithm());
                row.set_digest(util::tohex(r->get_digest()));
                row.set_ttl(r->get_ttl());
                row.set_rr_zonemd_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_URI_e:
            {
                dns_rr_URI *r = dynamic_cast<dns_rr_URI*>(rr.get());
                row_rr_uri row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_priority(r->get_priority());
                row.set_weight(r->get_weight());
                row.set_target(r->get_target());
                row.set_ttl(r->get_ttl());
                row.set_rr_uri_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_SSHFP_e:
            {
                dns_rr_SSHFP *r = dynamic_cast<dns_rr_SSHFP*>(rr.get());
                row_rr_sshfp row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_algorithm(r->get_algorithm());
                row.set_fp_type(r->get_fp_type());
                row.set_fingerprint(util::tohex(r->get_fingerprint()));
                row.set_ttl(r->get_ttl());
                row.set_rr_sshfp_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_TLSA_e:
            {
                dns_rr_TLSA *r = dynamic_cast<dns_rr_TLSA*>(rr.get());
                row_rr_tlsa row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_certifcate_usage(r->get_certifcate_usage());
                row.set_selector(r->get_selector());
                row.set_matching_type(r->get_matching_type());
                row.set_certificate_association(util::tohex(r->get_certificate_association()));
                row.set_ttl(r->get_ttl());
                row.set_rr_tlsa_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_OPENPGPKEY_e:
            {
                dns_rr_OPENPGPKEY *r = dynamic_cast<dns_rr_OPENPGPKEY*>(rr.get());
                row_rr_openpgpkey row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_pgpkey(util::tobase64(r->get_pgpkey()));
                row.set_ttl(r->get_ttl());
                row.set_rr_openpgpkey_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_DHCID_e:
            {
                dns_rr_DHCID *r = dynamic_cast<dns_rr_DHCID*>(rr.get());
                row_rr_dhcid row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_dhcid_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_CERT_e:
            {
                dns_rr_CERT *r = dynamic_cast<dns_rr_CERT*>(rr.get());
                row_rr_cert row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_certificate_type(r->get_certificate_type());
                row.set_key_tag(r->get_key_tag());
                row.set_algorithm(r->get_algorithm());
                row.set_certificate(util::tobase64(r->get_certificate()));
                row.set_ttl(r->get_ttl());
                row.set_rr_cert_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_EUI48_e:
            {
                dns_rr_EUI48 *r = dynamic_cast<dns_rr_EUI48*>(rr.get());
                row_rr_eui48 row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_eui48(r->get_eui48().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_eui48_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_EUI64_e:
            {
                dns_rr_EUI64 *r = dynamic_cast<dns_rr_EUI64*>(rr.get());
                row_rr_eui64 row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_eui64(r->get_eui64().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_eui64_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_CSYNC_e:
            {
                dns_rr_CSYNC *r = dynamic_cast<dns_rr_CSYNC*>(rr.get());
                row_rr_csync row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_soa_serial(r->get_soa_serial());
                row.set_flags(r->get_flags());
                row.set_type_bitmap(r->get_type_bitmap()->to_json().to_string());
                row.set_ttl(r->get_ttl());
                row.set_rr_csync_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;
            case dns_rr::T_GENERIC_e:
            {
                dns_rr_GENERIC *r = dynamic_cast<dns_rr_GENERIC*>(rr.get());
                row_rr_generic row;
                row.set_new_primary_key_value();
                row.set_name(rr->get_name()->to_string());
                row.set_zone_id(r->get_zone_id());
                r->set_id(row.get_primary_key_value());
                row.set_contents(util::tobase64(r->get_contents()));
                row.set_ttl(r->get_ttl());
                row.set_rr_generic_id(r->get_id());
                row.set_zone_id(r->get_zone_id());
                row.update_row(conn);
            }
            break;

    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::delete_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
    case dns_rr::T_SOA_e:
        row_rr_soa::delete_by_rr_soa_id(conn, rr->get_id());
        break;
    case dns_rr::T_A_e:
        row_rr_a::delete_by_rr_a_id(conn, rr->get_id());
        break;
    case dns_rr::T_AAAA_e:
        row_rr_aaaa::delete_by_rr_aaaa_id(conn, rr->get_id());
        break;
    case dns_rr::T_AFSDB_e:
        row_rr_afsdb::delete_by_rr_afsdb_id(conn, rr->get_id());
        break;
    case dns_rr::T_NS_e:
        row_rr_ns::delete_by_rr_ns_id(conn, rr->get_id());
        break;
    case dns_rr::T_MX_e:
        row_rr_mx::delete_by_rr_mx_id(conn, rr->get_id());
        break;
    case dns_rr::T_CNAME_e:
        row_rr_cname::delete_by_rr_cname_id(conn, rr->get_id());
        break;
    case dns_rr::T_DNAME_e:
        row_rr_dname::delete_by_rr_dname_id(conn, rr->get_id());
        break;
    case dns_rr::T_PTR_e:
        row_rr_ptr::delete_by_rr_ptr_id(conn, rr->get_id());
        break;
    case dns_rr::T_TXT_e:
        row_rr_txt::delete_by_rr_txt_id(conn, rr->get_id());
        break;
    case dns_rr::T_NAPTR_e:
        row_rr_naptr::delete_by_rr_naptr_id(conn, rr->get_id());
        break;
    case dns_rr::T_KX_e:
        row_rr_kx::delete_by_rr_kx_id(conn, rr->get_id());
        break;
    case dns_rr::T_SRV_e:
        row_rr_srv::delete_by_rr_srv_id(conn, rr->get_id());
        break;
    case dns_rr::T_HINFO_e:
        row_rr_hinfo::delete_by_rr_hinfo_id(conn, rr->get_id());
        break;
    case dns_rr::T_SVCB_e:
        row_rr_svcb::delete_by_rr_svcb_id(conn, rr->get_id());
        break;
    case dns_rr::T_IPSECKEY_e:
        row_rr_ipseckey::delete_by_rr_ipseckey_id(conn, rr->get_id());
        break;
    case dns_rr::T_LOC_e:
        row_rr_loc::delete_by_rr_loc_id(conn, rr->get_id());
        break;
    case dns_rr::T_HTTPS_e:
        row_rr_https::delete_by_rr_https_id(conn, rr->get_id());
        break;
    case dns_rr::T_CAA_e:
        row_rr_caa::delete_by_rr_caa_id(conn, rr->get_id());
        break;
    case dns_rr::T_ZONEMD_e:
        row_rr_zonemd::delete_by_rr_zonemd_id(conn, rr->get_id());
        break;
    case dns_rr::T_URI_e:
        row_rr_uri::delete_by_rr_uri_id(conn, rr->get_id());
        break;
    case dns_rr::T_SSHFP_e:
        row_rr_sshfp::delete_by_rr_sshfp_id(conn, rr->get_id());
        break;
    case dns_rr::T_TLSA_e:
        row_rr_tlsa::delete_by_rr_tlsa_id(conn, rr->get_id());
        break;
    case dns_rr::T_OPENPGPKEY_e:
        row_rr_openpgpkey::delete_by_rr_openpgpkey_id(conn, rr->get_id());
        break;
    case dns_rr::T_DHCID_e:
        row_rr_dhcid::delete_by_rr_dhcid_id(conn, rr->get_id());
        break;
    case dns_rr::T_CERT_e:
        row_rr_cert::delete_by_rr_cert_id(conn, rr->get_id());
        break;
    case dns_rr::T_EUI48_e:
        row_rr_eui48::delete_by_rr_eui48_id(conn, rr->get_id());
        break;
    case dns_rr::T_EUI64_e:
        row_rr_eui64::delete_by_rr_eui64_id(conn, rr->get_id());
        break;
    case dns_rr::T_CSYNC_e:
        row_rr_csync::delete_by_rr_csync_id(conn, rr->get_id());
        break;
    case dns_rr::T_GENERIC_e:
        row_rr_generic::delete_by_rr_generic_id(conn, rr->get_id());
        break;

    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}
