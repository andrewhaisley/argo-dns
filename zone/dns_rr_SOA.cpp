//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "types.hpp"
#include "util.hpp"
#include "buffer.hpp"
#include "dns_type_bitmap.hpp"
#include "dns_rr_SOA.hpp"

using namespace adns;
using namespace std;

dns_rr_SOA::dns_rr_SOA() : dns_rr()
{
    set_type(dns_rr::T_SOA_e);
}

dns_rr_SOA::~dns_rr_SOA()
{
}

dns_rr *dns_rr_SOA::clone()
{
    return new dns_rr_SOA(*this);
}

void dns_rr_SOA::json_serialize() const
{
    dns_rr::json_serialize();
    set_json("mname", get_mname()->to_string());
    set_json("rname", get_rname()->to_string());
    set_json("serial", int(get_serial()));
    set_json("refresh", int(get_refresh()));
    set_json("retry", int(get_retry()));
    set_json("expire", int(get_expire()));
    set_json("minimum", int(get_minimum()));

}

void dns_rr_SOA::json_unserialize() 
{
    m_mname = make_shared<dns_name>((*m_json_object)["mname"]);
    m_rname = make_shared<dns_name>((*m_json_object)["rname"]);
    m_serial = int((*m_json_object)["serial"]);
    m_refresh = int((*m_json_object)["refresh"]);
    m_retry = int((*m_json_object)["retry"]);
    m_expire = int((*m_json_object)["expire"]);
    m_minimum = int((*m_json_object)["minimum"]);

}

void dns_rr_SOA::set_mname(const std::shared_ptr<dns_name> &mname)
{
    m_mname = mname;
}
void dns_rr_SOA::set_rname(const std::shared_ptr<dns_name> &rname)
{
    m_rname = rname;
}
void dns_rr_SOA::set_serial(uint serial)
{
    m_serial = serial;
}
void dns_rr_SOA::set_refresh(int refresh)
{
    m_refresh = refresh;
}
void dns_rr_SOA::set_retry(int retry)
{
    m_retry = retry;
}
void dns_rr_SOA::set_expire(int expire)
{
    m_expire = expire;
}
void dns_rr_SOA::set_minimum(uint minimum)
{
    m_minimum = minimum;
}

const std::shared_ptr<dns_name> &dns_rr_SOA::get_mname() const
{
    return m_mname;
}
const std::shared_ptr<dns_name> &dns_rr_SOA::get_rname() const
{
    return m_rname;
}
uint dns_rr_SOA::get_serial() const
{
    return m_serial;
}
int dns_rr_SOA::get_refresh() const
{
    return m_refresh;
}
int dns_rr_SOA::get_retry() const
{
    return m_retry;
}
int dns_rr_SOA::get_expire() const
{
    return m_expire;
}
uint dns_rr_SOA::get_minimum() const
{
    return m_minimum;
}


void dns_rr_SOA::dump() const
{
    LOG(debug) << to_string();
}

string dns_rr_SOA::to_string() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_ttl()) + " " + get_mname()->to_string() + " " + get_rname()->to_string() + " " + boost::lexical_cast<string>(get_serial()) + " " + boost::lexical_cast<string>(get_refresh()) + " " + boost::lexical_cast<string>(get_retry()) + " " + boost::lexical_cast<string>(get_expire()) + " " + boost::lexical_cast<string>(get_minimum());
}

string dns_rr_SOA::to_string_no_ttl() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + get_mname()->to_string() + " " + get_rname()->to_string() + " " + boost::lexical_cast<string>(get_serial()) + " " + boost::lexical_cast<string>(get_refresh()) + " " + boost::lexical_cast<string>(get_retry()) + " " + boost::lexical_cast<string>(get_expire()) + " " + boost::lexical_cast<string>(get_minimum());
}
