//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
/**
 * automatically generated by rrgen.py at %%DATE_TIME%% do not edit by hand.
 */

#pragma once

#include <string>
#include <memory>

#include <boost/lexical_cast.hpp>
#include "json_serializable.hpp"
#include "dns_rr.hpp"
#include "dns_message_types.hpp"

namespace adns
{
    class dns_rr : public json_serializable
    {
    public:

        friend class dns_rr_parser;
        friend class dns_rr_unparser;

        /**
         * Resource record types - a subset of query types.
         */
        typedef enum
        {
            T_NONE_e = 0,
%%DNS_RR_ENUM_TYPES%%
        }
        type_t;

        /**
         * we only support IN class records
         */
        typedef enum
        {
            C_IN_e = 1
        }
        class_t;
        
        /**
         * Constructor 
         */
        dns_rr();

        /**
         * Destructor 
         */
        virtual ~dns_rr();

        /**
         * make a copy 
         */
        virtual dns_rr *clone() = 0;

        /**
         * get the unique (for the relevant type) ID of the record. This will only ever
         * be valid for records that have been persisted
         */
        uuid get_id() const;

        /**
         * == operator using type and id
         */
        bool operator==(const dns_rr &other) const;

        /**
         * set methods
         */
        void set_name(const std::shared_ptr<dns_name> &n);
        void set_ttl(uint ttl);
        void set_class(class_t c);
        void set_id(uuid id);
        void set_zone_id(uuid id);

        /**
         * turn a type into a string
         */
        static std::string type_to_string(type_t t);

        /**
         * turn a string into a type
         */
        static type_t string_to_type(const std::string &s);

        /**
         * dump out for debug
         */
        virtual void dump() const;

        // get methods
        const std::shared_ptr<dns_name> &get_name() const;
        type_t get_type() const;
        class_t get_class() const;
        uint get_ttl() const;
        void update_ttl(int diff);
        uuid get_zone_id() const;

        // turn into a string for logging/debug/comparison
        virtual std::string to_string() const;
        virtual std::string to_string_no_ttl() const;

    protected:

        /** 
         * applicable to all types of resource record
         */
        std::shared_ptr<dns_name> m_name;
        class_t m_class;
        type_t  m_type;
        uint    m_ttl;
        uuid    m_id;
        uuid    m_zone_id;

        /**
         * only for use by derived classes
         */
        void set_type(type_t t);

        /**
         * serialize into a json object
         */
        virtual void json_serialize() const;
    };

    std::ostream &operator<<(std::ostream& stream, const dns_rr &rr);
}
