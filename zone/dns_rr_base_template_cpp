// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at %%DATE_TIME%% do not edit by hand.
 */

#include <unordered_map>
#include <string>

#include <boost/lexical_cast.hpp>
#include <boost/uuid/uuid_generators.hpp>

#include "types.hpp"
#include "util.hpp"
#include "dns_rr.hpp"

using namespace adns;
using namespace std;

static unordered_map<uint16_t, string> s_type_to_name = 
{
%%DNS_RR_TYPE_TO_NAME%%
    { dns_rr::T_NONE_e, "NONE" }
};

static unordered_map<string, uint16_t> s_name_to_type =
{
%%DNS_RR_NAME_TO_TYPE%%
    { "NONE", dns_rr::T_NONE_e }
};

dns_rr::dns_rr() : m_class(C_IN_e), m_type(T_NONE_e), m_ttl(0), m_id(boost::uuids::nil_generator()()), m_zone_id(boost::uuids::nil_generator()())
{
}

dns_rr::~dns_rr()
{
}

void dns_rr::set_name(const shared_ptr<dns_name> &n)
{
    m_name = n;
}

void dns_rr::set_type(type_t t)
{
    m_type = t;
}

void dns_rr::set_ttl(uint ttl)
{
    m_ttl = ttl;
}

void dns_rr::set_id(uuid id)
{
    m_id = id;
}

void dns_rr::set_zone_id(uuid zone_id)
{
    m_zone_id = zone_id;
}

void dns_rr::set_class(dns_rr::class_t c)
{
    m_class = c;
}

bool dns_rr::operator==(const dns_rr &other) const
{
    return (m_type == other.m_type) && (m_id == other.m_id);
}

void dns_rr::dump() const
{
    LOG(debug) << *this;
}

string dns_rr::type_to_string(type_t t)
{
    auto i = s_type_to_name.find(t);
    if (i == s_type_to_name.end())
    {
        return "<GENERIC(" + boost::lexical_cast<string>(t) + ")>";
    }
    else
    {
        return i->second;
    }
}

dns_rr::type_t dns_rr::string_to_type(const string &s)
{
    auto i = s_name_to_type.find(s);
    if (i == s_name_to_type.end())
    {
        return T_NONE_e;
    }
    else
    {
        return static_cast<type_t>(i->second);
    }
}

const shared_ptr<dns_name> &dns_rr::get_name() const
{
    return m_name;
}

dns_rr::type_t dns_rr::get_type() const
{
    return m_type;
}

uint dns_rr::get_ttl() const
{
    return m_ttl;
}

void dns_rr::update_ttl(int diff)
{
    m_ttl += diff;
}

dns_rr::class_t dns_rr::get_class() const
{
    return m_class;
}

uuid dns_rr::get_zone_id() const
{
    return m_zone_id;
}

uuid dns_rr::get_id() const
{
    return m_id;
}

void dns_rr::json_serialize() const
{
    set_json("zone_id", boost::lexical_cast<string>(m_zone_id));
    set_json("rr_id", boost::lexical_cast<string>(m_id));
    set_json("name", m_name->to_string());
    set_json("type", type_to_string(m_type));
    set_json("ttl", int(m_ttl));
}

string dns_rr::to_string() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_ttl());
}

string dns_rr::to_string_no_ttl() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type());
}

ostream &adns::operator<<(ostream& stream, const dns_rr &rr)
{
    return stream << rr.to_string();
}
