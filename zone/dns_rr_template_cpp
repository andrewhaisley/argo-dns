//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
/**
 * automatically generated by rrgen.py at %%DATE_TIME%% do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "types.hpp"
#include "util.hpp"
#include "buffer.hpp"
#include "dns_type_bitmap.hpp"
#include "dns_rr_%%RECORD_TYPE%%.hpp"

using namespace adns;
using namespace std;

dns_rr_%%RECORD_TYPE%%::dns_rr_%%RECORD_TYPE%%() : dns_rr()
{
    set_type(dns_rr::T_%%RECORD_TYPE%%_e);
}

dns_rr_%%RECORD_TYPE%%::~dns_rr_%%RECORD_TYPE%%()
{
}

dns_rr *dns_rr_%%RECORD_TYPE%%::clone()
{
    return new dns_rr_%%RECORD_TYPE%%(*this);
}

void dns_rr_%%RECORD_TYPE%%::json_serialize() const
{
    dns_rr::json_serialize();
%%JSON_SERIALIZE%%
}

void dns_rr_%%RECORD_TYPE%%::json_unserialize() 
{
%%JSON_UNSERIALIZE%%
}

%%SET_METHODS%%
%%GET_METHODS%%

void dns_rr_%%RECORD_TYPE%%::dump() const
{
    LOG(debug) << to_string();
}

string dns_rr_%%RECORD_TYPE%%::to_string() const
{
    return %%TO_STRING_IMPL%%
}

string dns_rr_%%RECORD_TYPE%%::to_string_no_ttl() const
{
    return %%TO_STRING_NO_TTL_IMPL%%
}
