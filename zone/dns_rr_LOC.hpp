// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
#pragma once

/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "dns_rr.hpp"

namespace adns
{
    /**
     * DNS resource record type LOC (type number 29)
     */
    class dns_rr_LOC final : public dns_rr
    {
    public:

        /**
         * Constructor 
         */
        dns_rr_LOC();

        /**
         * Destructor 
         */
        virtual ~dns_rr_LOC();

        /**
         * make a copy 
         */
        virtual dns_rr *clone();

        /**
         * set methods
         */
        void set_version(octet version);
        void set_size(octet size);
        void set_horizontal_precision(octet horizontal_precision);
        void set_vertical_precision(octet vertical_precision);
        void set_latitude(int latitude);
        void set_longitude(int longitude);
        void set_altitude(int altitude);

        /**
         * get methods
         */
        octet get_version() const;
        octet get_size() const;
        octet get_horizontal_precision() const;
        octet get_vertical_precision() const;
        int get_latitude() const;
        int get_longitude() const;
        int get_altitude() const;

        /**
         * dump out for debug
         */
        virtual void dump() const;

        /**
         * turn into a string for logging/debug/comparison
         */
        virtual std::string to_string() const;

        /**
         * turn into a string for logging/debug/comparison with no TTL
         */
        virtual std::string to_string_no_ttl() const;

    protected:

        /**
         * serialize into a json object
         */
        virtual void json_serialize() const;

        /**
         * unserialize from a json object
         */
        virtual void json_unserialize();

    private:

        octet m_version;
        octet m_size;
        octet m_horizontal_precision;
        octet m_vertical_precision;
        int m_latitude;
        int m_longitude;
        int m_altitude;

    };
}
