// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at %%DATE_TIME%% do not edit by hand.
 */

#include "types.hpp"
#include "connection_pool.hpp"
#include "util.hpp"
#include "dns_rr_dal.hpp"
#include "dns_type_bitmap.hpp"

%%INCLUDE%%

using namespace std;
using namespace adns;
using namespace adns::db;
using namespace boost::log::trivial;

int dns_rr_dal::NUM_RESOURCE_RECORD_TYPES = %%NUM_RECORD_TYPES%%;

dns_rr::type_t dns_rr_dal::rr_types[] = {%%RECORD_TYPES%%};

void dns_rr_dal::read_resource_records(uuid zid, dns_rr::type_t t, list<shared_ptr<dns_rr>> &res)
{
    auto conn = connection_pool::get_connection();

    res.clear();

    switch (t)
    {
%%READ%%
    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::delete_resource_records(connection &conn, uuid zid, dns_rr::type_t t)
{
    switch (t)
    {
%%DELETE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::insert_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%INSERT%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::update_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%UPDATE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::delete_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%DELETE_SINGLE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}
