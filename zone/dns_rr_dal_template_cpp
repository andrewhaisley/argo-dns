//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
/**
 * automatically generated by rrgen.py at %%DATE_TIME%% do not edit by hand.
 */

#include "types.hpp"
#include "connection_pool.hpp"
#include "util.hpp"
#include "dns_rr_dal.hpp"
#include "dns_type_bitmap.hpp"

%%INCLUDE%%

using namespace std;
using namespace adns;
using namespace adns::db;
using namespace boost::log::trivial;

int dns_rr_dal::NUM_RESOURCE_RECORD_TYPES = %%NUM_RECORD_TYPES%%;

dns_rr::type_t dns_rr_dal::rr_types[] = {%%RECORD_TYPES%%};

void dns_rr_dal::read_resource_records(uuid zid, dns_rr::type_t t, list<shared_ptr<dns_rr>> &res)
{
    auto conn = connection_pool::get_connection();

    res.clear();

    switch (t)
    {
%%READ%%
    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::delete_resource_records(connection &conn, uuid zid, dns_rr::type_t t)
{
    switch (t)
    {
%%DELETE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type supplied", t);
    }
}

void dns_rr_dal::insert_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%INSERT%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::update_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%UPDATE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}

void dns_rr_dal::delete_resource_record(connection &conn, const shared_ptr<dns_rr> &rr)
{
    switch (rr->get_type())
    {
%%DELETE_SINGLE%%
    default:
        THROW(rr_dal_exception, "invalid resource record type", rr->get_type());
    }
}
