// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "types.hpp"
#include "util.hpp"
#include "buffer.hpp"
#include "dns_type_bitmap.hpp"
#include "dns_rr_HINFO.hpp"

using namespace adns;
using namespace std;

dns_rr_HINFO::dns_rr_HINFO() : dns_rr()
{
    set_type(dns_rr::T_HINFO_e);
}

dns_rr_HINFO::~dns_rr_HINFO()
{
}

dns_rr *dns_rr_HINFO::clone()
{
    return new dns_rr_HINFO(*this);
}

void dns_rr_HINFO::json_serialize() const
{
    dns_rr::json_serialize();
    set_json("cpu", get_cpu()->to_string());
    set_json("os", get_os()->to_string());

}

void dns_rr_HINFO::json_unserialize() 
{
    m_cpu = make_shared<dns_label>((*m_json_object)["cpu"]);
    m_os = make_shared<dns_label>((*m_json_object)["os"]);

}

void dns_rr_HINFO::set_cpu(const std::shared_ptr<dns_label> &cpu)
{
    m_cpu = cpu;
}
void dns_rr_HINFO::set_os(const std::shared_ptr<dns_label> &os)
{
    m_os = os;
}

const std::shared_ptr<dns_label> &dns_rr_HINFO::get_cpu() const
{
    return m_cpu;
}
const std::shared_ptr<dns_label> &dns_rr_HINFO::get_os() const
{
    return m_os;
}


void dns_rr_HINFO::dump() const
{
    LOG(debug) << to_string();
}

string dns_rr_HINFO::to_string() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_ttl()) + " " + get_cpu()->to_string() + " " + get_os()->to_string();
}

string dns_rr_HINFO::to_string_no_ttl() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + get_cpu()->to_string() + " " + get_os()->to_string();
}
