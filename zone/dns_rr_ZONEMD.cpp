// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * automatically generated by rrgen.py at 05:05PM on January 30, 2024 do not edit by hand.
 */

#include <boost/lexical_cast.hpp>

#include "types.hpp"
#include "util.hpp"
#include "buffer.hpp"
#include "dns_type_bitmap.hpp"
#include "dns_rr_ZONEMD.hpp"

using namespace adns;
using namespace std;

dns_rr_ZONEMD::dns_rr_ZONEMD() : dns_rr()
{
    set_type(dns_rr::T_ZONEMD_e);
}

dns_rr_ZONEMD::~dns_rr_ZONEMD()
{
}

dns_rr *dns_rr_ZONEMD::clone()
{
    return new dns_rr_ZONEMD(*this);
}

void dns_rr_ZONEMD::json_serialize() const
{
    dns_rr::json_serialize();
    set_json("soa_serial", int(get_soa_serial()));
    set_json("scheme", int(get_scheme()));
    set_json("algorithm", int(get_algorithm()));
    set_json("digest", util::tohex(get_digest()));

}

void dns_rr_ZONEMD::json_unserialize() 
{
    m_soa_serial = int((*m_json_object)["soa_serial"]);
    m_scheme = int((*m_json_object)["scheme"]);
    m_algorithm = int((*m_json_object)["algorithm"]);
    m_digest = util::fromhex((*m_json_object)["digest"]);

}

void dns_rr_ZONEMD::set_soa_serial(uint soa_serial)
{
    m_soa_serial = soa_serial;
}
void dns_rr_ZONEMD::set_scheme(octet scheme)
{
    m_scheme = scheme;
}
void dns_rr_ZONEMD::set_algorithm(octet algorithm)
{
    m_algorithm = algorithm;
}
void dns_rr_ZONEMD::set_digest(const buffer &digest)
{
    m_digest = digest;
}

uint dns_rr_ZONEMD::get_soa_serial() const
{
    return m_soa_serial;
}
octet dns_rr_ZONEMD::get_scheme() const
{
    return m_scheme;
}
octet dns_rr_ZONEMD::get_algorithm() const
{
    return m_algorithm;
}
const buffer &dns_rr_ZONEMD::get_digest() const
{
    return m_digest;
}


void dns_rr_ZONEMD::dump() const
{
    LOG(debug) << to_string();
}

string dns_rr_ZONEMD::to_string() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_ttl()) + " " + boost::lexical_cast<string>(get_soa_serial()) + " " + boost::lexical_cast<string>(int(get_scheme())) + " " + boost::lexical_cast<string>(int(get_algorithm())) + " " + util::tohex(get_digest());
}

string dns_rr_ZONEMD::to_string_no_ttl() const
{
    return (get_name() ? get_name()->to_string() : string("")) + " " + dns_rr::type_to_string(get_type()) + " " + boost::lexical_cast<string>(get_soa_serial()) + " " + boost::lexical_cast<string>(int(get_scheme())) + " " + boost::lexical_cast<string>(int(get_algorithm())) + " " + util::tohex(get_digest());
}
