//
//  Copyright 2025 Andrew Haisley
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//  associated documentation files (the “Software”), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial 
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
//  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
 
#pragma once

#include <list>

#include <openssl/ssl.h>
#include <openssl/err.h>

#include "types.hpp"
#include "socket_address.hpp"
#include "buffer.hpp"
#include "tcp_server_socket.hpp"
#include "exception.hpp"

EXCEPTION_CLASS(ssl_socket_exception, socket_exception)
EXCEPTION_CLASS(ssl_accept_failed_exception, socket_exception)

namespace adns
{
    /**
     * SSL server sockets.
     */
    class ssl_server_socket : public tcp_server_socket
    {
    public:

        /**
         * SSL socket bound to the given address (IP type is derived from the address).
         */
        ssl_server_socket(const socket_address &sa);

        /**
         * destructor - close etc.
         */
        virtual ~ssl_server_socket();

        /**
         * accept a new connection - blocks until one arrives.
         */
        virtual std::shared_ptr<tcp_server_socket> accept();

        /**
         * accept any new connection queued up - non-blocking
         */
        virtual std::list<std::shared_ptr<tcp_server_socket>> accept_many();

        /**
         * read N bytes with a timeout - throw tcp_socket_exception in that case.
         */
        virtual buffer read(int n, uint timeout_ms);

        /**
         * write data with a timeout - throw tcp_socket_exception in that case.
         */
        virtual void write(const octet *data, uint n, uint timeout_ms);

    private:

        SSL_CTX *m_ctx;
        SSL     *m_ssl;

        /**
         * get the error string generated by the SSL library
         */
        std::string ssl_error_string();

        /**
         * construct an ssl_server_socket from a connected tcp_server_socket
         */
        ssl_server_socket(tcp_server_socket *ts);

        /**
         * construct a new ssl socket from the tcp socket returned from an accept call
         */
        std::shared_ptr<tcp_server_socket> make_ssl_socket(const std::shared_ptr<tcp_server_socket> &ts);

        /**
         * SSL callback for protocol negotiation
         */
        static int alpn_cb(SSL *ssl,
             const unsigned char **out,
             unsigned char *outlen,
             const unsigned char *in,
             unsigned int inlen,
             void *arg);
    };
}
