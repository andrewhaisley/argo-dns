// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
#pragma once

#include <list>

#include <openssl/ssl.h>
#include <openssl/err.h>

#include "types.hpp"
#include "socket_address.hpp"
#include "buffer.hpp"
#include "tcp_server_socket.hpp"
#include "exception.hpp"

EXCEPTION_CLASS(ssl_socket_exception, socket_exception)
EXCEPTION_CLASS(ssl_accept_failed_exception, socket_exception)

namespace adns
{
    /**
     * SSL server sockets.
     */
    class ssl_server_socket : public tcp_server_socket
    {
    public:

        /**
         * SSL socket bound to the given address (IP type is derived from the address).
         */
        ssl_server_socket(const socket_address &sa);

        /**
         * destructor - close etc.
         */
        virtual ~ssl_server_socket();

        /**
         * accept a new connection - blocks until one arrives.
         */
        virtual std::shared_ptr<tcp_server_socket> accept();

        /**
         * accept any new connection queued up - non-blocking
         */
        virtual std::list<std::shared_ptr<tcp_server_socket>> accept_many();

        /**
         * read N bytes with a timeout - throw tcp_socket_exception in that case.
         */
        virtual buffer read(int n, uint timeout_ms);

        /**
         * write data with a timeout - throw tcp_socket_exception in that case.
         */
        virtual void write(const octet *data, uint n, uint timeout_ms);

    private:

        SSL_CTX *m_ctx;
        SSL     *m_ssl;

        /**
         * get the error string generated by the SSL library
         */
        std::string ssl_error_string();

        /**
         * construct an ssl_server_socket from a connected tcp_server_socket
         */
        ssl_server_socket(tcp_server_socket *ts);

        /**
         * construct a new ssl socket from the tcp socket returned from an accept call
         */
        std::shared_ptr<tcp_server_socket> make_ssl_socket(const std::shared_ptr<tcp_server_socket> &ts);

        /**
         * SSL callback for protocol negotiation
         */
        static int alpn_cb(SSL *ssl,
             const unsigned char **out,
             unsigned char *outlen,
             const unsigned char *in,
             unsigned int inlen,
             void *arg);
    };
}
