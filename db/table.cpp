// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * autogenerated by dbgen.py at 12:34PM on October 23, 2025, do not hand edit
 */

#include <boost/uuid/uuid_generators.hpp>

#include "table.hpp"

#include "row_schema_version.hpp"
#include "row_address_list.hpp"
#include "row_address_list_address.hpp"
#include "row_address_list_network.hpp"
#include "row_basic_config.hpp"
#include "row_cache_config.hpp"
#include "row_control_server.hpp"
#include "row_ui_server.hpp"
#include "row_dns_client.hpp"
#include "row_dns_server.hpp"
#include "row_horizon.hpp"
#include "row_root_server.hpp"
#include "row_server.hpp"
#include "row_server_socket_address.hpp"
#include "row_zone.hpp"
#include "row_rr_history.hpp"
#include "row_rr_a.hpp"
#include "row_rr_aaaa.hpp"
#include "row_rr_afsdb.hpp"
#include "row_rr_caa.hpp"
#include "row_rr_cert.hpp"
#include "row_rr_cname.hpp"
#include "row_rr_csync.hpp"
#include "row_rr_dhcid.hpp"
#include "row_rr_dname.hpp"
#include "row_rr_eui48.hpp"
#include "row_rr_eui64.hpp"
#include "row_rr_generic.hpp"
#include "row_rr_hinfo.hpp"
#include "row_rr_https.hpp"
#include "row_rr_ipseckey.hpp"
#include "row_rr_kx.hpp"
#include "row_rr_loc.hpp"
#include "row_rr_mx.hpp"
#include "row_rr_naptr.hpp"
#include "row_rr_ns.hpp"
#include "row_rr_openpgpkey.hpp"
#include "row_rr_ptr.hpp"
#include "row_rr_soa.hpp"
#include "row_rr_srv.hpp"
#include "row_rr_sshfp.hpp"
#include "row_rr_svcb.hpp"
#include "row_rr_tlsa.hpp"
#include "row_rr_txt.hpp"
#include "row_rr_uri.hpp"
#include "row_rr_zonemd.hpp"


using namespace std;
using namespace adns;
using namespace db;

map<type_t, list<pair<table::table_t, string>>> table::o_table_sql;
map<type_t, list<pair<table::table_t, list<string>>>> table::o_index_sql;
map<type_t, list<pair<table::table_t, list<string>>>> table::o_fk_sql;

// get a list of SQL strings to create DB tables for the relevant DB type (null op for some
// DB types - e.g. MongoDB).
list<pair<table::table_t, string>> table::get_table_sql(type_t db_type)
{
    if (o_table_sql.size() == 0)
    {
        o_table_sql[mysql_e].push_back(pair<table_t, string>(schema_version_e, "CREATE TABLE schema_version(schema_version_id VARCHAR(36) NOT NULL PRIMARY KEY, version_string VARCHAR(255) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(schema_version_e, "CREATE TABLE schema_version(schema_version_id VARCHAR(36) NOT NULL PRIMARY KEY, version_string VARCHAR(255) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(schema_version_e, "schema_version"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(schema_version_e, "CREATE TABLE schema_version(schema_version_id VARCHAR(36) NOT NULL PRIMARY KEY, version_string VARCHAR(255) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(address_list_e, "CREATE TABLE address_list(address_list_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(address_list_e, "CREATE TABLE address_list(address_list_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(address_list_e, "address_list"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(address_list_e, "CREATE TABLE address_list(address_list_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(address_list_address_e, "CREATE TABLE address_list_address(address_list_address_id VARCHAR(36) NOT NULL PRIMARY KEY, address_list_id VARCHAR(36) NOT NULL, ip_address VARCHAR(45) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(address_list_address_e, "CREATE TABLE address_list_address(address_list_address_id VARCHAR(36) NOT NULL PRIMARY KEY, address_list_id VARCHAR(36) NOT NULL, ip_address VARCHAR(45) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(address_list_address_e, "address_list_address"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(address_list_address_e, "CREATE TABLE address_list_address(address_list_address_id VARCHAR(36) NOT NULL PRIMARY KEY, address_list_id VARCHAR(36) NOT NULL, ip_address VARCHAR(45) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(address_list_network_e, "CREATE TABLE address_list_network(address_list_id VARCHAR(36) NOT NULL, address_list_network_id VARCHAR(36) NOT NULL PRIMARY KEY, cidr_address VARCHAR(49) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(address_list_network_e, "CREATE TABLE address_list_network(address_list_id VARCHAR(36) NOT NULL, address_list_network_id VARCHAR(36) NOT NULL PRIMARY KEY, cidr_address VARCHAR(49) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(address_list_network_e, "address_list_network"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(address_list_network_e, "CREATE TABLE address_list_network(address_list_id VARCHAR(36) NOT NULL, address_list_network_id VARCHAR(36) NOT NULL PRIMARY KEY, cidr_address VARCHAR(49) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(basic_config_e, "CREATE TABLE basic_config(config_id VARCHAR(36) NOT NULL PRIMARY KEY, name VARCHAR(100) NOT NULL, value VARCHAR(100) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(basic_config_e, "CREATE TABLE basic_config(config_id VARCHAR(36) NOT NULL PRIMARY KEY, name VARCHAR(100) NOT NULL, value VARCHAR(100) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(basic_config_e, "basic_config"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(basic_config_e, "CREATE TABLE basic_config(config_id VARCHAR(36) NOT NULL PRIMARY KEY, name VARCHAR(100) NOT NULL, value VARCHAR(100) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(cache_config_e, "CREATE TABLE cache_config(cache_config_id VARCHAR(36) NOT NULL PRIMARY KEY, client_id VARCHAR(36) NOT NULL, default_ttl INTEGER UNSIGNED NOT NULL, cache_garbage_collect_ms INTEGER UNSIGNED NOT NULL, cache_max_referral_rrs INTEGER UNSIGNED NOT NULL, cache_max_answer_rrs INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(cache_config_e, "CREATE TABLE cache_config(cache_config_id VARCHAR(36) NOT NULL PRIMARY KEY, client_id VARCHAR(36) NOT NULL, default_ttl INTEGER UNSIGNED NOT NULL, cache_garbage_collect_ms INTEGER UNSIGNED NOT NULL, cache_max_referral_rrs INTEGER UNSIGNED NOT NULL, cache_max_answer_rrs INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(cache_config_e, "cache_config"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(cache_config_e, "CREATE TABLE cache_config(cache_config_id VARCHAR(36) NOT NULL PRIMARY KEY, client_id VARCHAR(36) NOT NULL, default_ttl INTEGER NOT NULL, cache_garbage_collect_ms INTEGER NOT NULL, cache_max_referral_rrs INTEGER NOT NULL, cache_max_answer_rrs INTEGER NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(control_server_e, "CREATE TABLE control_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_connection_timeout_ms INTEGER UNSIGNED NOT NULL, maximum_payload_size INTEGER UNSIGNED NOT NULL, num_threads INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(control_server_e, "CREATE TABLE control_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_connection_timeout_ms INTEGER UNSIGNED NOT NULL, maximum_payload_size INTEGER UNSIGNED NOT NULL, num_threads INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(control_server_e, "control_server"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(control_server_e, "CREATE TABLE control_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER NOT NULL, client_connection_timeout_ms INTEGER NOT NULL, maximum_payload_size INTEGER NOT NULL, num_threads INTEGER NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(ui_server_e, "CREATE TABLE ui_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_connection_timeout_ms INTEGER UNSIGNED NOT NULL, num_threads INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL, document_root VARCHAR(255) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(ui_server_e, "CREATE TABLE ui_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_connection_timeout_ms INTEGER UNSIGNED NOT NULL, num_threads INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL, document_root VARCHAR(255) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(ui_server_e, "ui_server"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(ui_server_e, "CREATE TABLE ui_server(address_list_id VARCHAR(36) NOT NULL, allowed_connection_backlog INTEGER NOT NULL, client_connection_timeout_ms INTEGER NOT NULL, num_threads INTEGER NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, use_ssl BOOLEAN NOT NULL, document_root VARCHAR(255) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(dns_client_e, "CREATE TABLE dns_client(client_id VARCHAR(36) NOT NULL PRIMARY KEY, connect_tcp_timeout_ms INTEGER UNSIGNED NOT NULL, num_parallel_udp INTEGER UNSIGNED NOT NULL, read_tcp_timeout_ms INTEGER UNSIGNED NOT NULL, server_port INTEGER UNSIGNED NOT NULL, total_timeout_ms INTEGER UNSIGNED NOT NULL, udp_timeout_ms INTEGER UNSIGNED NOT NULL, use_ip4 BOOLEAN NOT NULL, use_ip6 BOOLEAN NOT NULL, use_tcp BOOLEAN NOT NULL, use_udp BOOLEAN NOT NULL, wait_udp_response_ms INTEGER UNSIGNED NOT NULL, write_tcp_timeout_ms INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(dns_client_e, "CREATE TABLE dns_client(client_id VARCHAR(36) NOT NULL PRIMARY KEY, connect_tcp_timeout_ms INTEGER UNSIGNED NOT NULL, num_parallel_udp INTEGER UNSIGNED NOT NULL, read_tcp_timeout_ms INTEGER UNSIGNED NOT NULL, server_port INTEGER UNSIGNED NOT NULL, total_timeout_ms INTEGER UNSIGNED NOT NULL, udp_timeout_ms INTEGER UNSIGNED NOT NULL, use_ip4 BOOLEAN NOT NULL, use_ip6 BOOLEAN NOT NULL, use_tcp BOOLEAN NOT NULL, use_udp BOOLEAN NOT NULL, wait_udp_response_ms INTEGER UNSIGNED NOT NULL, write_tcp_timeout_ms INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(dns_client_e, "dns_client"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(dns_client_e, "CREATE TABLE dns_client(client_id VARCHAR(36) NOT NULL PRIMARY KEY, connect_tcp_timeout_ms INTEGER NOT NULL, num_parallel_udp INTEGER NOT NULL, read_tcp_timeout_ms INTEGER NOT NULL, server_port INTEGER NOT NULL, total_timeout_ms INTEGER NOT NULL, udp_timeout_ms INTEGER NOT NULL, use_ip4 BOOLEAN NOT NULL, use_ip6 BOOLEAN NOT NULL, use_tcp BOOLEAN NOT NULL, use_udp BOOLEAN NOT NULL, wait_udp_response_ms INTEGER NOT NULL, write_tcp_timeout_ms INTEGER NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(dns_server_e, "CREATE TABLE dns_server(allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_id VARCHAR(36) NOT NULL, max_external_resolutions INTEGER UNSIGNED NOT NULL, max_in_message_queue_length INTEGER UNSIGNED NOT NULL, max_out_message_queue_length INTEGER UNSIGNED NOT NULL, max_queued_per_question INTEGER UNSIGNED NOT NULL, max_recursion_depth INTEGER UNSIGNED NOT NULL, min_cache_ttl INTEGER UNSIGNED NOT NULL, num_forwarding_threads INTEGER UNSIGNED NOT NULL, num_receive_threads INTEGER UNSIGNED NOT NULL, num_send_threads INTEGER UNSIGNED NOT NULL, num_tcp_recursive_slots INTEGER UNSIGNED NOT NULL, num_tcp_threads INTEGER UNSIGNED NOT NULL, num_udp_recursive_slots INTEGER UNSIGNED NOT NULL, num_udp_threads INTEGER UNSIGNED NOT NULL, recursive_timeout_ms INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, tcp_max_body_wait_ms INTEGER UNSIGNED NOT NULL, tcp_max_len_wait_ms INTEGER UNSIGNED NOT NULL, udp_reply_timeout_ms INTEGER UNSIGNED NOT NULL, udp_retry_count INTEGER UNSIGNED NOT NULL, doh_client_timeout_ms INTEGER UNSIGNED NOT NULL, maximum_http_request_size INTEGER UNSIGNED NOT NULL, doh_path VARCHAR(255) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(dns_server_e, "CREATE TABLE dns_server(allowed_connection_backlog INTEGER UNSIGNED NOT NULL, client_id VARCHAR(36) NOT NULL, max_external_resolutions INTEGER UNSIGNED NOT NULL, max_in_message_queue_length INTEGER UNSIGNED NOT NULL, max_out_message_queue_length INTEGER UNSIGNED NOT NULL, max_queued_per_question INTEGER UNSIGNED NOT NULL, max_recursion_depth INTEGER UNSIGNED NOT NULL, min_cache_ttl INTEGER UNSIGNED NOT NULL, num_forwarding_threads INTEGER UNSIGNED NOT NULL, num_receive_threads INTEGER UNSIGNED NOT NULL, num_send_threads INTEGER UNSIGNED NOT NULL, num_tcp_recursive_slots INTEGER UNSIGNED NOT NULL, num_tcp_threads INTEGER UNSIGNED NOT NULL, num_udp_recursive_slots INTEGER UNSIGNED NOT NULL, num_udp_threads INTEGER UNSIGNED NOT NULL, recursive_timeout_ms INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, tcp_max_body_wait_ms INTEGER UNSIGNED NOT NULL, tcp_max_len_wait_ms INTEGER UNSIGNED NOT NULL, udp_reply_timeout_ms INTEGER UNSIGNED NOT NULL, udp_retry_count INTEGER UNSIGNED NOT NULL, doh_client_timeout_ms INTEGER UNSIGNED NOT NULL, maximum_http_request_size INTEGER UNSIGNED NOT NULL, doh_path VARCHAR(255) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(dns_server_e, "dns_server"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(dns_server_e, "CREATE TABLE dns_server(allowed_connection_backlog INTEGER NOT NULL, client_id VARCHAR(36) NOT NULL, max_external_resolutions INTEGER NOT NULL, max_in_message_queue_length INTEGER NOT NULL, max_out_message_queue_length INTEGER NOT NULL, max_queued_per_question INTEGER NOT NULL, max_recursion_depth INTEGER NOT NULL, min_cache_ttl INTEGER NOT NULL, num_forwarding_threads INTEGER NOT NULL, num_receive_threads INTEGER NOT NULL, num_send_threads INTEGER NOT NULL, num_tcp_recursive_slots INTEGER NOT NULL, num_tcp_threads INTEGER NOT NULL, num_udp_recursive_slots INTEGER NOT NULL, num_udp_threads INTEGER NOT NULL, recursive_timeout_ms INTEGER NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, tcp_max_body_wait_ms INTEGER NOT NULL, tcp_max_len_wait_ms INTEGER NOT NULL, udp_reply_timeout_ms INTEGER NOT NULL, udp_retry_count INTEGER NOT NULL, doh_client_timeout_ms INTEGER NOT NULL, maximum_http_request_size INTEGER NOT NULL, doh_path VARCHAR(255) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(horizon_e, "CREATE TABLE horizon(address_list_id VARCHAR(36) NOT NULL, allow_recursion BOOLEAN NOT NULL, horizon_id VARCHAR(36) NOT NULL PRIMARY KEY, check_order INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(horizon_e, "CREATE TABLE horizon(address_list_id VARCHAR(36) NOT NULL, allow_recursion BOOLEAN NOT NULL, horizon_id VARCHAR(36) NOT NULL PRIMARY KEY, check_order INTEGER UNSIGNED NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(horizon_e, "horizon"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(horizon_e, "CREATE TABLE horizon(address_list_id VARCHAR(36) NOT NULL, allow_recursion BOOLEAN NOT NULL, horizon_id VARCHAR(36) NOT NULL PRIMARY KEY, check_order INTEGER NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(root_server_e, "CREATE TABLE root_server(addr_ttl INTEGER UNSIGNED NOT NULL, ip_address VARCHAR(45) NOT NULL, last_contact_date_time DATETIME NOT NULL, name VARCHAR(255) NOT NULL, ns_ttl INTEGER UNSIGNED NOT NULL, root_server_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(root_server_e, "CREATE TABLE root_server(addr_ttl INTEGER UNSIGNED NOT NULL, ip_address VARCHAR(45) NOT NULL, last_contact_date_time DATETIME NOT NULL, name VARCHAR(255) NOT NULL, ns_ttl INTEGER UNSIGNED NOT NULL, root_server_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(root_server_e, "root_server"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(root_server_e, "CREATE TABLE root_server(addr_ttl INTEGER NOT NULL, ip_address VARCHAR(45) NOT NULL, last_contact_date_time TIMESTAMP NOT NULL, name VARCHAR(255) NOT NULL, ns_ttl INTEGER NOT NULL, root_server_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(server_e, "CREATE TABLE server(protocol VARCHAR(20) NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, transport VARCHAR(20) NOT NULL, http2_deflate_table_size INTEGER UNSIGNED NOT NULL, is_enabled BOOLEAN NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(server_e, "CREATE TABLE server(protocol VARCHAR(20) NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, transport VARCHAR(20) NOT NULL, http2_deflate_table_size INTEGER UNSIGNED NOT NULL, is_enabled BOOLEAN NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(server_e, "server"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(server_e, "CREATE TABLE server(protocol VARCHAR(20) NOT NULL, server_id VARCHAR(36) NOT NULL PRIMARY KEY, transport VARCHAR(20) NOT NULL, http2_deflate_table_size INTEGER NOT NULL, is_enabled BOOLEAN NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(server_socket_address_e, "CREATE TABLE server_socket_address(ip_address VARCHAR(45) NOT NULL, port INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL, server_socket_address_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(server_socket_address_e, "CREATE TABLE server_socket_address(ip_address VARCHAR(45) NOT NULL, port INTEGER UNSIGNED NOT NULL, server_id VARCHAR(36) NOT NULL, server_socket_address_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(server_socket_address_e, "server_socket_address"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(server_socket_address_e, "CREATE TABLE server_socket_address(ip_address VARCHAR(45) NOT NULL, port INTEGER NOT NULL, server_id VARCHAR(36) NOT NULL, server_socket_address_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(zone_e, "CREATE TABLE zone(forward_ip_address VARCHAR(45) NULL, forward_port INTEGER UNSIGNED NULL, horizon_id VARCHAR(36) NOT NULL, is_forwarded BOOLEAN NOT NULL, name VARCHAR(255) NOT NULL, zone_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(zone_e, "CREATE TABLE zone(forward_ip_address VARCHAR(45) NULL, forward_port INTEGER UNSIGNED NULL, horizon_id VARCHAR(36) NOT NULL, is_forwarded BOOLEAN NOT NULL, name VARCHAR(255) NOT NULL, zone_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(zone_e, "zone"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(zone_e, "CREATE TABLE zone(forward_ip_address VARCHAR(45) NULL, forward_port INTEGER NULL, horizon_id VARCHAR(36) NOT NULL, is_forwarded BOOLEAN NOT NULL, name VARCHAR(255) NOT NULL, zone_id VARCHAR(36) NOT NULL PRIMARY KEY)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_history_e, "CREATE TABLE rr_history(rr_history_id VARCHAR(36) NOT NULL PRIMARY KEY, full_record VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL, sequence_number INTEGER UNSIGNED NOT NULL, action VARCHAR(1) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_history_e, "CREATE TABLE rr_history(rr_history_id VARCHAR(36) NOT NULL PRIMARY KEY, full_record VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL, sequence_number INTEGER UNSIGNED NOT NULL, action VARCHAR(1) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_history_e, "rr_history"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_history_e, "CREATE TABLE rr_history(rr_history_id VARCHAR(36) NOT NULL PRIMARY KEY, full_record VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL, sequence_number INTEGER NOT NULL, action VARCHAR(1) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_a_e, "CREATE TABLE rr_a(ip4_addr VARCHAR(15) NOT NULL, name VARCHAR(255) NOT NULL, rr_a_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_a_e, "CREATE TABLE rr_a(ip4_addr VARCHAR(15) NOT NULL, name VARCHAR(255) NOT NULL, rr_a_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_a_e, "rr_a"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_a_e, "CREATE TABLE rr_a(ip4_addr VARCHAR(15) NOT NULL, name VARCHAR(255) NOT NULL, rr_a_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_aaaa_e, "CREATE TABLE rr_aaaa(ip6_addr VARCHAR(45) NOT NULL, name VARCHAR(255) NOT NULL, rr_aaaa_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_aaaa_e, "CREATE TABLE rr_aaaa(ip6_addr VARCHAR(45) NOT NULL, name VARCHAR(255) NOT NULL, rr_aaaa_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_aaaa_e, "rr_aaaa"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_aaaa_e, "CREATE TABLE rr_aaaa(ip6_addr VARCHAR(45) NOT NULL, name VARCHAR(255) NOT NULL, rr_aaaa_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_afsdb_e, "CREATE TABLE rr_afsdb(hostname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_afsdb_id VARCHAR(36) NOT NULL PRIMARY KEY, subtype INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_afsdb_e, "CREATE TABLE rr_afsdb(hostname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_afsdb_id VARCHAR(36) NOT NULL PRIMARY KEY, subtype INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_afsdb_e, "rr_afsdb"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_afsdb_e, "CREATE TABLE rr_afsdb(hostname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_afsdb_id VARCHAR(36) NOT NULL PRIMARY KEY, subtype INTEGER NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_caa_e, "CREATE TABLE rr_caa(contents VARCHAR(8000) NOT NULL, flags INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_caa_id VARCHAR(36) NOT NULL PRIMARY KEY, tag VARCHAR(255) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_caa_e, "CREATE TABLE rr_caa(contents VARCHAR(8000) NOT NULL, flags INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_caa_id VARCHAR(36) NOT NULL PRIMARY KEY, tag VARCHAR(255) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_caa_e, "rr_caa"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_caa_e, "CREATE TABLE rr_caa(contents VARCHAR(8000) NOT NULL, flags INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_caa_id VARCHAR(36) NOT NULL PRIMARY KEY, tag VARCHAR(255) NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_cert_e, "CREATE TABLE rr_cert(algorithm INTEGER UNSIGNED NOT NULL, certificate VARCHAR(8000) NOT NULL, certificate_type INTEGER UNSIGNED NOT NULL, key_tag INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_cert_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_cert_e, "CREATE TABLE rr_cert(algorithm INTEGER UNSIGNED NOT NULL, certificate VARCHAR(8000) NOT NULL, certificate_type INTEGER UNSIGNED NOT NULL, key_tag INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_cert_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_cert_e, "rr_cert"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_cert_e, "CREATE TABLE rr_cert(algorithm INTEGER NOT NULL, certificate VARCHAR(8000) NOT NULL, certificate_type INTEGER NOT NULL, key_tag INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_cert_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_cname_e, "CREATE TABLE rr_cname(cname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_cname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_cname_e, "CREATE TABLE rr_cname(cname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_cname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_cname_e, "rr_cname"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_cname_e, "CREATE TABLE rr_cname(cname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_cname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_csync_e, "CREATE TABLE rr_csync(flags INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_csync_id VARCHAR(36) NOT NULL PRIMARY KEY, soa_serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, type_bitmap VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_csync_e, "CREATE TABLE rr_csync(flags INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_csync_id VARCHAR(36) NOT NULL PRIMARY KEY, soa_serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, type_bitmap VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_csync_e, "rr_csync"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_csync_e, "CREATE TABLE rr_csync(flags INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_csync_id VARCHAR(36) NOT NULL PRIMARY KEY, soa_serial INTEGER NOT NULL, ttl INTEGER NOT NULL, type_bitmap VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_dhcid_e, "CREATE TABLE rr_dhcid(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_dhcid_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_dhcid_e, "CREATE TABLE rr_dhcid(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_dhcid_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_dhcid_e, "rr_dhcid"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_dhcid_e, "CREATE TABLE rr_dhcid(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_dhcid_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_dname_e, "CREATE TABLE rr_dname(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_dname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_dname_e, "CREATE TABLE rr_dname(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_dname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_dname_e, "rr_dname"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_dname_e, "CREATE TABLE rr_dname(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_dname_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_eui48_e, "CREATE TABLE rr_eui48(eui48 VARCHAR(17) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui48_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_eui48_e, "CREATE TABLE rr_eui48(eui48 VARCHAR(17) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui48_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_eui48_e, "rr_eui48"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_eui48_e, "CREATE TABLE rr_eui48(eui48 VARCHAR(17) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui48_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_eui64_e, "CREATE TABLE rr_eui64(eui64 VARCHAR(23) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui64_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_eui64_e, "CREATE TABLE rr_eui64(eui64 VARCHAR(23) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui64_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_eui64_e, "rr_eui64"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_eui64_e, "CREATE TABLE rr_eui64(eui64 VARCHAR(23) NOT NULL, name VARCHAR(255) NOT NULL, rr_eui64_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_generic_e, "CREATE TABLE rr_generic(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_generic_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_generic_e, "CREATE TABLE rr_generic(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_generic_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_generic_e, "rr_generic"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_generic_e, "CREATE TABLE rr_generic(contents VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_generic_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_hinfo_e, "CREATE TABLE rr_hinfo(cpu VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, os VARCHAR(255) NOT NULL, rr_hinfo_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_hinfo_e, "CREATE TABLE rr_hinfo(cpu VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, os VARCHAR(255) NOT NULL, rr_hinfo_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_hinfo_e, "rr_hinfo"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_hinfo_e, "CREATE TABLE rr_hinfo(cpu VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, os VARCHAR(255) NOT NULL, rr_hinfo_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_https_e, "CREATE TABLE rr_https(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_https_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_https_e, "CREATE TABLE rr_https(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_https_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_https_e, "rr_https"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_https_e, "CREATE TABLE rr_https(name VARCHAR(255) NOT NULL, priority INTEGER NOT NULL, rr_https_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_ipseckey_e, "CREATE TABLE rr_ipseckey(ipseckey VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_ipseckey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_ipseckey_e, "CREATE TABLE rr_ipseckey(ipseckey VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_ipseckey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_ipseckey_e, "rr_ipseckey"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_ipseckey_e, "CREATE TABLE rr_ipseckey(ipseckey VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_ipseckey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_kx_e, "CREATE TABLE rr_kx(exchanger VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER UNSIGNED NOT NULL, rr_kx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_kx_e, "CREATE TABLE rr_kx(exchanger VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER UNSIGNED NOT NULL, rr_kx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_kx_e, "rr_kx"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_kx_e, "CREATE TABLE rr_kx(exchanger VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER NOT NULL, rr_kx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_loc_e, "CREATE TABLE rr_loc(altitude INTEGER NOT NULL, horizontal_precision INTEGER UNSIGNED NOT NULL, latitude INTEGER NOT NULL, longitude INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_loc_id VARCHAR(36) NOT NULL PRIMARY KEY, size INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, version INTEGER UNSIGNED NOT NULL, vertical_precision INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_loc_e, "CREATE TABLE rr_loc(altitude INTEGER NOT NULL, horizontal_precision INTEGER UNSIGNED NOT NULL, latitude INTEGER NOT NULL, longitude INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_loc_id VARCHAR(36) NOT NULL PRIMARY KEY, size INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, version INTEGER UNSIGNED NOT NULL, vertical_precision INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_loc_e, "rr_loc"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_loc_e, "CREATE TABLE rr_loc(altitude INTEGER NOT NULL, horizontal_precision INTEGER NOT NULL, latitude INTEGER NOT NULL, longitude INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_loc_id VARCHAR(36) NOT NULL PRIMARY KEY, size INTEGER NOT NULL, ttl INTEGER NOT NULL, version INTEGER NOT NULL, vertical_precision INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_mx_e, "CREATE TABLE rr_mx(exchange VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER NOT NULL, rr_mx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_mx_e, "CREATE TABLE rr_mx(exchange VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER NOT NULL, rr_mx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_mx_e, "rr_mx"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_mx_e, "CREATE TABLE rr_mx(exchange VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, preference INTEGER NOT NULL, rr_mx_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_naptr_e, "CREATE TABLE rr_naptr(flags VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, naptr_order INTEGER UNSIGNED NOT NULL, naptr_regexp VARCHAR(255) NOT NULL, preference INTEGER UNSIGNED NOT NULL, replacement VARCHAR(253) NOT NULL, rr_naptr_id VARCHAR(36) NOT NULL PRIMARY KEY, services VARCHAR(255) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_naptr_e, "CREATE TABLE rr_naptr(flags VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, naptr_order INTEGER UNSIGNED NOT NULL, naptr_regexp VARCHAR(255) NOT NULL, preference INTEGER UNSIGNED NOT NULL, replacement VARCHAR(253) NOT NULL, rr_naptr_id VARCHAR(36) NOT NULL PRIMARY KEY, services VARCHAR(255) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_naptr_e, "rr_naptr"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_naptr_e, "CREATE TABLE rr_naptr(flags VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, naptr_order INTEGER NOT NULL, naptr_regexp VARCHAR(255) NOT NULL, preference INTEGER NOT NULL, replacement VARCHAR(253) NOT NULL, rr_naptr_id VARCHAR(36) NOT NULL PRIMARY KEY, services VARCHAR(255) NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_ns_e, "CREATE TABLE rr_ns(name VARCHAR(255) NOT NULL, nsdname VARCHAR(253) NOT NULL, rr_ns_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_ns_e, "CREATE TABLE rr_ns(name VARCHAR(255) NOT NULL, nsdname VARCHAR(253) NOT NULL, rr_ns_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_ns_e, "rr_ns"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_ns_e, "CREATE TABLE rr_ns(name VARCHAR(255) NOT NULL, nsdname VARCHAR(253) NOT NULL, rr_ns_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_openpgpkey_e, "CREATE TABLE rr_openpgpkey(name VARCHAR(255) NOT NULL, pgpkey VARCHAR(8000) NOT NULL, rr_openpgpkey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_openpgpkey_e, "CREATE TABLE rr_openpgpkey(name VARCHAR(255) NOT NULL, pgpkey VARCHAR(8000) NOT NULL, rr_openpgpkey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_openpgpkey_e, "rr_openpgpkey"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_openpgpkey_e, "CREATE TABLE rr_openpgpkey(name VARCHAR(255) NOT NULL, pgpkey VARCHAR(8000) NOT NULL, rr_openpgpkey_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_ptr_e, "CREATE TABLE rr_ptr(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_ptr_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_ptr_e, "CREATE TABLE rr_ptr(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_ptr_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_ptr_e, "rr_ptr"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_ptr_e, "CREATE TABLE rr_ptr(dname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, rr_ptr_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_soa_e, "CREATE TABLE rr_soa(expire INTEGER NOT NULL, minimum INTEGER UNSIGNED NOT NULL, mname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, refresh INTEGER NOT NULL, retry INTEGER NOT NULL, rname VARCHAR(253) NOT NULL, rr_soa_id VARCHAR(36) NOT NULL PRIMARY KEY, serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_soa_e, "CREATE TABLE rr_soa(expire INTEGER NOT NULL, minimum INTEGER UNSIGNED NOT NULL, mname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, refresh INTEGER NOT NULL, retry INTEGER NOT NULL, rname VARCHAR(253) NOT NULL, rr_soa_id VARCHAR(36) NOT NULL PRIMARY KEY, serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_soa_e, "rr_soa"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_soa_e, "CREATE TABLE rr_soa(expire INTEGER NOT NULL, minimum INTEGER NOT NULL, mname VARCHAR(253) NOT NULL, name VARCHAR(255) NOT NULL, refresh INTEGER NOT NULL, retry INTEGER NOT NULL, rname VARCHAR(253) NOT NULL, rr_soa_id VARCHAR(36) NOT NULL PRIMARY KEY, serial INTEGER NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_srv_e, "CREATE TABLE rr_srv(name VARCHAR(255) NOT NULL, port INTEGER UNSIGNED NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_srv_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, weight INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_srv_e, "CREATE TABLE rr_srv(name VARCHAR(255) NOT NULL, port INTEGER UNSIGNED NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_srv_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, weight INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_srv_e, "rr_srv"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_srv_e, "CREATE TABLE rr_srv(name VARCHAR(255) NOT NULL, port INTEGER NOT NULL, priority INTEGER NOT NULL, rr_srv_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(253) NOT NULL, ttl INTEGER NOT NULL, weight INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_sshfp_e, "CREATE TABLE rr_sshfp(algorithm INTEGER UNSIGNED NOT NULL, fingerprint VARCHAR(8000) NOT NULL, fp_type INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_sshfp_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_sshfp_e, "CREATE TABLE rr_sshfp(algorithm INTEGER UNSIGNED NOT NULL, fingerprint VARCHAR(8000) NOT NULL, fp_type INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_sshfp_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_sshfp_e, "rr_sshfp"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_sshfp_e, "CREATE TABLE rr_sshfp(algorithm INTEGER NOT NULL, fingerprint VARCHAR(8000) NOT NULL, fp_type INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_sshfp_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_svcb_e, "CREATE TABLE rr_svcb(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_svcb_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_svcb_e, "CREATE TABLE rr_svcb(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_svcb_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_svcb_e, "rr_svcb"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_svcb_e, "CREATE TABLE rr_svcb(name VARCHAR(255) NOT NULL, priority INTEGER NOT NULL, rr_svcb_id VARCHAR(36) NOT NULL PRIMARY KEY, svcparams VARCHAR(8000) NOT NULL, target VARCHAR(253) NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_tlsa_e, "CREATE TABLE rr_tlsa(certifcate_usage INTEGER UNSIGNED NOT NULL, certificate_association VARCHAR(8000) NOT NULL, matching_type INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_tlsa_id VARCHAR(36) NOT NULL PRIMARY KEY, selector INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_tlsa_e, "CREATE TABLE rr_tlsa(certifcate_usage INTEGER UNSIGNED NOT NULL, certificate_association VARCHAR(8000) NOT NULL, matching_type INTEGER UNSIGNED NOT NULL, name VARCHAR(255) NOT NULL, rr_tlsa_id VARCHAR(36) NOT NULL PRIMARY KEY, selector INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_tlsa_e, "rr_tlsa"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_tlsa_e, "CREATE TABLE rr_tlsa(certifcate_usage INTEGER NOT NULL, certificate_association VARCHAR(8000) NOT NULL, matching_type INTEGER NOT NULL, name VARCHAR(255) NOT NULL, rr_tlsa_id VARCHAR(36) NOT NULL PRIMARY KEY, selector INTEGER NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_txt_e, "CREATE TABLE rr_txt(name VARCHAR(255) NOT NULL, rr_txt_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, txt VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_txt_e, "CREATE TABLE rr_txt(name VARCHAR(255) NOT NULL, rr_txt_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER UNSIGNED NOT NULL, txt VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_txt_e, "rr_txt"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_txt_e, "CREATE TABLE rr_txt(name VARCHAR(255) NOT NULL, rr_txt_id VARCHAR(36) NOT NULL PRIMARY KEY, ttl INTEGER NOT NULL, txt VARCHAR(8000) NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_uri_e, "CREATE TABLE rr_uri(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_uri_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(8000) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, weight INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_uri_e, "CREATE TABLE rr_uri(name VARCHAR(255) NOT NULL, priority INTEGER UNSIGNED NOT NULL, rr_uri_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(8000) NOT NULL, ttl INTEGER UNSIGNED NOT NULL, weight INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_uri_e, "rr_uri"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_uri_e, "CREATE TABLE rr_uri(name VARCHAR(255) NOT NULL, priority INTEGER NOT NULL, rr_uri_id VARCHAR(36) NOT NULL PRIMARY KEY, target VARCHAR(8000) NOT NULL, ttl INTEGER NOT NULL, weight INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mysql_e].push_back(pair<table_t, string>(rr_zonemd_e, "CREATE TABLE rr_zonemd(algorithm INTEGER UNSIGNED NOT NULL, digest VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_zonemd_id VARCHAR(36) NOT NULL PRIMARY KEY, scheme INTEGER UNSIGNED NOT NULL, soa_serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[sqlite_e].push_back(pair<table_t, string>(rr_zonemd_e, "CREATE TABLE rr_zonemd(algorithm INTEGER UNSIGNED NOT NULL, digest VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_zonemd_id VARCHAR(36) NOT NULL PRIMARY KEY, scheme INTEGER UNSIGNED NOT NULL, soa_serial INTEGER UNSIGNED NOT NULL, ttl INTEGER UNSIGNED NOT NULL, zone_id VARCHAR(36) NOT NULL)"));
        o_table_sql[mongodb_e].push_back(pair<table_t, string>(rr_zonemd_e, "rr_zonemd"));
        o_table_sql[postgres_e].push_back(pair<table_t, string>(rr_zonemd_e, "CREATE TABLE rr_zonemd(algorithm INTEGER NOT NULL, digest VARCHAR(8000) NOT NULL, name VARCHAR(255) NOT NULL, rr_zonemd_id VARCHAR(36) NOT NULL PRIMARY KEY, scheme INTEGER NOT NULL, soa_serial INTEGER NOT NULL, ttl INTEGER NOT NULL, zone_id VARCHAR(36) NOT NULL)"));

    }

    return o_table_sql[db_type];
}

// get a list of SQL strings to create DB indexes for the relevant DB type (null op for some
// DB types - e.g. MongoDB).
list<pair<table::table_t, list<string>>> table::get_index_sql(type_t db_type)
{
    if (o_index_sql.size() == 0)
    {
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"schema_version\", \"column\": \"schema_version_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"address_list\", \"column\": \"address_list_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_addr_list_addr_list_id ON address_list_address(address_list_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_addr_list_addr_list_id ON address_list_address(address_list_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_addr_list_addr_list_id ON address_list_address(address_list_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"address_list_address\", \"column\": \"address_list_address_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"address_list_address\", \"column\": \"address_list_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_addr_list_network_list_id ON address_list_network(address_list_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_addr_list_network_list_id ON address_list_network(address_list_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_addr_list_network_list_id ON address_list_network(address_list_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"address_list_network\", \"column\": \"address_list_network_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"address_list_network\", \"column\": \"address_list_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"basic_config\", \"column\": \"config_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_cache_client ON cache_config(client_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_cache_client ON cache_config(client_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_cache_client ON cache_config(client_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"cache_config\", \"column\": \"cache_config_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"cache_config\", \"column\": \"client_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_access_al_id ON control_server(address_list_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_access_al_id ON control_server(address_list_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_access_al_id ON control_server(address_list_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"control_server\", \"column\": \"server_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"control_server\", \"column\": \"address_list_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_ui_access_al_id ON ui_server(address_list_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_ui_access_al_id ON ui_server(address_list_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_ui_access_al_id ON ui_server(address_list_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"ui_server\", \"column\": \"server_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"ui_server\", \"column\": \"address_list_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"dns_client\", \"column\": \"client_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_dns_server_client ON dns_server(client_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_dns_server_client ON dns_server(client_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_dns_server_client ON dns_server(client_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"dns_server\", \"column\": \"server_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"dns_server\", \"column\": \"client_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_horizon_al_id ON horizon(address_list_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_horizon_al_id ON horizon(address_list_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_horizon_al_id ON horizon(address_list_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"horizon\", \"column\": \"horizon_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"horizon\", \"column\": \"address_list_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"root_server\", \"column\": \"root_server_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"server\", \"column\": \"server_id\", \"unique\": true}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX fk_server_sa_server ON server_socket_address(server_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX fk_server_sa_server ON server_socket_address(server_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX fk_server_sa_server ON server_socket_address(server_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"server_socket_address\", \"column\": \"server_socket_address_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"server_socket_address\", \"column\": \"server_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_zone_horizon_id ON zone(horizon_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_zone_horizon_id ON zone(horizon_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_zone_horizon_id ON zone(horizon_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"zone\", \"column\": \"zone_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"zone\", \"column\": \"horizon_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_history_zone_seq ON rr_history(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_history_zone_seq ON rr_history(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_history_zone_seq ON rr_history(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_history\", \"column\": \"rr_history_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_history\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_a_zone ON rr_a(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_a_zone ON rr_a(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_a_zone ON rr_a(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_a\", \"column\": \"rr_a_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_a\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_aaaa_zone ON rr_aaaa(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_aaaa_zone ON rr_aaaa(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_aaaa_zone ON rr_aaaa(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_aaaa\", \"column\": \"rr_aaaa_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_aaaa\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_afsdb_zone ON rr_afsdb(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_afsdb_zone ON rr_afsdb(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_afsdb_zone ON rr_afsdb(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_afsdb\", \"column\": \"rr_afsdb_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_afsdb\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_caa_zone ON rr_caa(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_caa_zone ON rr_caa(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_caa_zone ON rr_caa(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_caa\", \"column\": \"rr_caa_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_caa\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_cert_zone ON rr_cert(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_cert_zone ON rr_cert(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_cert_zone ON rr_cert(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_cert\", \"column\": \"rr_cert_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_cert\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_cname_zone ON rr_cname(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_cname_zone ON rr_cname(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_cname_zone ON rr_cname(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_cname\", \"column\": \"rr_cname_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_cname\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_csync_zone ON rr_csync(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_csync_zone ON rr_csync(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_csync_zone ON rr_csync(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_csync\", \"column\": \"rr_csync_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_csync\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_dhcid_zone ON rr_dhcid(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_dhcid_zone ON rr_dhcid(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_dhcid_zone ON rr_dhcid(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_dhcid\", \"column\": \"rr_dhcid_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_dhcid\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_dname_zone ON rr_dname(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_dname_zone ON rr_dname(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_dname_zone ON rr_dname(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_dname\", \"column\": \"rr_dname_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_dname\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_eui48_zone ON rr_eui48(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_eui48_zone ON rr_eui48(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_eui48_zone ON rr_eui48(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_eui48\", \"column\": \"rr_eui48_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_eui48\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_eui64_zone ON rr_eui64(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_eui64_zone ON rr_eui64(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_eui64_zone ON rr_eui64(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_eui64\", \"column\": \"rr_eui64_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_eui64\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_generic_zone ON rr_generic(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_generic_zone ON rr_generic(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_generic_zone ON rr_generic(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_generic\", \"column\": \"rr_generic_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_generic\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_hinfo_zone ON rr_hinfo(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_hinfo_zone ON rr_hinfo(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_hinfo_zone ON rr_hinfo(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_hinfo\", \"column\": \"rr_hinfo_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_hinfo\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_https_zone ON rr_https(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_https_zone ON rr_https(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_https_zone ON rr_https(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_https\", \"column\": \"rr_https_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_https\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_ipseckey_zone ON rr_ipseckey(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_ipseckey_zone ON rr_ipseckey(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_ipseckey_zone ON rr_ipseckey(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ipseckey\", \"column\": \"rr_ipseckey_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ipseckey\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_kx_zone ON rr_kx(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_kx_zone ON rr_kx(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_kx_zone ON rr_kx(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_kx\", \"column\": \"rr_kx_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_kx\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_loc_zone ON rr_loc(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_loc_zone ON rr_loc(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_loc_zone ON rr_loc(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_loc\", \"column\": \"rr_loc_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_loc\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_mx_zone ON rr_mx(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_mx_zone ON rr_mx(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_mx_zone ON rr_mx(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_mx\", \"column\": \"rr_mx_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_mx\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_naptr_zone ON rr_naptr(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_naptr_zone ON rr_naptr(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_naptr_zone ON rr_naptr(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_naptr\", \"column\": \"rr_naptr_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_naptr\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_ns_zone ON rr_ns(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_ns_zone ON rr_ns(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_ns_zone ON rr_ns(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ns\", \"column\": \"rr_ns_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ns\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_openpgpkey_zone ON rr_openpgpkey(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_openpgpkey_zone ON rr_openpgpkey(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_openpgpkey_zone ON rr_openpgpkey(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_openpgpkey\", \"column\": \"rr_openpgpkey_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_openpgpkey\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_ptr_zone ON rr_ptr(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_ptr_zone ON rr_ptr(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_ptr_zone ON rr_ptr(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ptr\", \"column\": \"rr_ptr_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_ptr\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_soa_zone ON rr_soa(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_soa_zone ON rr_soa(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_soa_zone ON rr_soa(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_soa\", \"column\": \"rr_soa_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_soa\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_srv_zone ON rr_srv(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_srv_zone ON rr_srv(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_srv_zone ON rr_srv(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_srv\", \"column\": \"rr_srv_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_srv\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_sshfp_zone ON rr_sshfp(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_sshfp_zone ON rr_sshfp(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_sshfp_zone ON rr_sshfp(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_sshfp\", \"column\": \"rr_sshfp_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_sshfp\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_svcb_zone ON rr_svcb(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_svcb_zone ON rr_svcb(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_svcb_zone ON rr_svcb(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_svcb\", \"column\": \"rr_svcb_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_svcb\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_tlsa_zone ON rr_tlsa(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_tlsa_zone ON rr_tlsa(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_tlsa_zone ON rr_tlsa(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_tlsa\", \"column\": \"rr_tlsa_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_tlsa\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_txt_zone ON rr_txt(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_txt_zone ON rr_txt(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_txt_zone ON rr_txt(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_txt\", \"column\": \"rr_txt_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_txt\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_uri_zone ON rr_uri(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_uri_zone ON rr_uri(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_uri_zone ON rr_uri(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_uri\", \"column\": \"rr_uri_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_uri\", \"column\": \"zone_id\", \"unique\": false}");
        o_index_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_index_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_index_sql[mongodb_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_index_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_index_sql[mysql_e].back().second.push_back("CREATE INDEX i_rr_zonemd_zone ON rr_zonemd(zone_id)");
        o_index_sql[sqlite_e].back().second.push_back("CREATE INDEX i_rr_zonemd_zone ON rr_zonemd(zone_id)");
        o_index_sql[postgres_e].back().second.push_back("CREATE INDEX i_rr_zonemd_zone ON rr_zonemd(zone_id)");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_zonemd\", \"column\": \"rr_zonemd_id\", \"unique\": true}");
        o_index_sql[mongodb_e].back().second.push_back("{\"table\": \"rr_zonemd\", \"column\": \"zone_id\", \"unique\": false}");

    }

    return o_index_sql[db_type];
}

// get a list of SQL strings to create DB foreign keys for the relevant DB type (null op for some
// DB types - e.g. MongoDB).
list<pair<table::table_t, list<string>>> table::get_foreign_key_sql(type_t db_type)
{
    if (o_fk_sql.size() == 0)
    {
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(schema_version_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_e, list<string>()));
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE control_server ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE control_server ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE ui_server ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE ui_server ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE horizon ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE horizon ADD FOREIGN KEY (address_list_id) REFERENCES address_list (address_list_id)");
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_address_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(address_list_network_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(basic_config_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(cache_config_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(control_server_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(ui_server_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(dns_client_e, list<string>()));
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE cache_config ADD FOREIGN KEY (client_id) REFERENCES dns_client (client_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE cache_config ADD FOREIGN KEY (client_id) REFERENCES dns_client (client_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE dns_server ADD FOREIGN KEY (client_id) REFERENCES dns_client (client_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE dns_server ADD FOREIGN KEY (client_id) REFERENCES dns_client (client_id)");
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(dns_server_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(horizon_e, list<string>()));
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE zone ADD FOREIGN KEY (horizon_id) REFERENCES horizon (horizon_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE zone ADD FOREIGN KEY (horizon_id) REFERENCES horizon (horizon_id)");
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(root_server_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(server_e, list<string>()));
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE control_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE control_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE ui_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE ui_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE dns_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE dns_server ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[mysql_e].back().second.push_back("ALTER TABLE server_socket_address ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[postgres_e].back().second.push_back("ALTER TABLE server_socket_address ADD FOREIGN KEY (server_id) REFERENCES server (server_id)");
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(server_socket_address_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(zone_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_history_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_a_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_aaaa_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_afsdb_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_caa_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_cert_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_cname_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_csync_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_dhcid_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_dname_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_eui48_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_eui64_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_generic_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_hinfo_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_https_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ipseckey_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_kx_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_loc_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_mx_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_naptr_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ns_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_openpgpkey_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_ptr_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_soa_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_srv_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_sshfp_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_svcb_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_tlsa_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_txt_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_uri_e, list<string>()));
        o_fk_sql[mysql_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_fk_sql[sqlite_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));
        o_fk_sql[postgres_e].push_back(pair<table_t, list<string>>(rr_zonemd_e, list<string>()));

    }

    return o_fk_sql[db_type];
}

void table::create_static(connection &conn)
{
    LOG(info) << "inserting base config static data";
    uuid config_id_5 = boost::uuids::random_generator()();
    uuid config_id_11 = boost::uuids::random_generator()();
    uuid config_id_8 = boost::uuids::random_generator()();
    uuid server_socket_address_id_1 = boost::uuids::random_generator()();
    uuid server_socket_address_id_4 = boost::uuids::random_generator()();
    uuid server_socket_address_id_10 = boost::uuids::random_generator()();
    uuid root_server_id_3 = boost::uuids::random_generator()();
    uuid server_socket_address_id_7 = boost::uuids::random_generator()();
    uuid client_id_0 = boost::uuids::random_generator()();
    uuid root_server_id_6 = boost::uuids::random_generator()();
    uuid client_id_3 = boost::uuids::random_generator()();
    uuid address_list_network_id_1 = boost::uuids::random_generator()();
    uuid root_server_id_9 = boost::uuids::random_generator()();
    uuid root_server_id_15 = boost::uuids::random_generator()();
    uuid address_list_id_2 = boost::uuids::random_generator()();
    uuid root_server_id_12 = boost::uuids::random_generator()();
    uuid root_server_id_18 = boost::uuids::random_generator()();
    uuid server_id_3 = boost::uuids::random_generator()();
    uuid root_server_id_21 = boost::uuids::random_generator()();
    uuid server_id_6 = boost::uuids::random_generator()();
    uuid root_server_id_24 = boost::uuids::random_generator()();
    uuid config_id_4 = boost::uuids::random_generator()();
    uuid server_id_1 = boost::uuids::random_generator()();
    uuid config_id_7 = boost::uuids::random_generator()();
    uuid config_id_10 = boost::uuids::random_generator()();
    uuid server_socket_address_id_3 = boost::uuids::random_generator()();
    uuid server_socket_address_id_6 = boost::uuids::random_generator()();
    uuid cache_config_id_0 = boost::uuids::random_generator()();
    uuid horizon_id_1 = boost::uuids::random_generator()();
    uuid server_socket_address_id_9 = boost::uuids::random_generator()();
    uuid client_id_2 = boost::uuids::random_generator()();
    uuid root_server_id_2 = boost::uuids::random_generator()();
    uuid server_socket_address_id_12 = boost::uuids::random_generator()();
    uuid root_server_id_8 = boost::uuids::random_generator()();
    uuid root_server_id_5 = boost::uuids::random_generator()();
    uuid address_list_network_id_3 = boost::uuids::random_generator()();
    uuid root_server_id_11 = boost::uuids::random_generator()();
    uuid address_list_address_id_2 = boost::uuids::random_generator()();
    uuid server_id_2 = boost::uuids::random_generator()();
    uuid root_server_id_14 = boost::uuids::random_generator()();
    uuid root_server_id_20 = boost::uuids::random_generator()();
    uuid address_list_id_1 = boost::uuids::random_generator()();
    uuid server_id_5 = boost::uuids::random_generator()();
    uuid root_server_id_17 = boost::uuids::random_generator()();
    uuid root_server_id_23 = boost::uuids::random_generator()();
    uuid config_id_6 = boost::uuids::random_generator()();
    uuid config_id_3 = boost::uuids::random_generator()();
    uuid config_id_9 = boost::uuids::random_generator()();
    uuid config_id_12 = boost::uuids::random_generator()();
    uuid server_socket_address_id_5 = boost::uuids::random_generator()();
    uuid server_socket_address_id_2 = boost::uuids::random_generator()();
    uuid server_socket_address_id_8 = boost::uuids::random_generator()();
    uuid client_id_1 = boost::uuids::random_generator()();
    uuid root_server_id_1 = boost::uuids::random_generator()();
    uuid server_socket_address_id_11 = boost::uuids::random_generator()();
    uuid client_id_4 = boost::uuids::random_generator()();
    uuid address_list_network_id_2 = boost::uuids::random_generator()();
    uuid root_server_id_4 = boost::uuids::random_generator()();
    uuid address_list_address_id_1 = boost::uuids::random_generator()();
    uuid root_server_id_7 = boost::uuids::random_generator()();
    uuid root_server_id_10 = boost::uuids::random_generator()();
    uuid schema_version_id_1 = boost::uuids::random_generator()();
    uuid root_server_id_13 = boost::uuids::random_generator()();
    uuid server_id_4 = boost::uuids::random_generator()();
    uuid root_server_id_16 = boost::uuids::random_generator()();
    uuid root_server_id_22 = boost::uuids::random_generator()();
    uuid address_list_id_3 = boost::uuids::random_generator()();
    uuid root_server_id_19 = boost::uuids::random_generator()();
    {
        row_schema_version _schema_version;
        _schema_version.set_schema_version_id(schema_version_id_1);
        _schema_version.set_version_string("1");
        _schema_version.insert_row(conn);
    }
    {
        row_address_list _address_list;
        _address_list.set_address_list_id(address_list_id_1);
        _address_list.insert_row(conn);
    }
    {
        row_address_list _address_list;
        _address_list.set_address_list_id(address_list_id_2);
        _address_list.insert_row(conn);
    }
    {
        row_address_list _address_list;
        _address_list.set_address_list_id(address_list_id_3);
        _address_list.insert_row(conn);
    }
    {
        row_address_list_network _address_list_network;
        _address_list_network.set_address_list_id(address_list_id_1);
        _address_list_network.set_address_list_network_id(address_list_network_id_1);
        _address_list_network.set_cidr_address("0.0.0.0/0");
        _address_list_network.insert_row(conn);
    }
    {
        row_address_list_network _address_list_network;
        _address_list_network.set_address_list_id(address_list_id_1);
        _address_list_network.set_address_list_network_id(address_list_network_id_2);
        _address_list_network.set_cidr_address("::/0");
        _address_list_network.insert_row(conn);
    }
    {
        row_address_list_network _address_list_network;
        _address_list_network.set_address_list_id(address_list_id_3);
        _address_list_network.set_address_list_network_id(address_list_network_id_3);
        _address_list_network.set_cidr_address("0.0.0.0/0");
        _address_list_network.insert_row(conn);
    }
    {
        row_address_list_address _address_list_address;
        _address_list_address.set_address_list_address_id(address_list_address_id_1);
        _address_list_address.set_address_list_id(address_list_id_2);
        _address_list_address.set_ip_address("127.0.0.1");
        _address_list_address.insert_row(conn);
    }
    {
        row_address_list_address _address_list_address;
        _address_list_address.set_address_list_address_id(address_list_address_id_2);
        _address_list_address.set_address_list_id(address_list_id_3);
        _address_list_address.set_ip_address("127.0.0.1");
        _address_list_address.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_3);
        _basic_config.set_name("all.support-edns");
        _basic_config.set_value("true");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_4);
        _basic_config.set_name("all.edns-size");
        _basic_config.set_value("4096");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_5);
        _basic_config.set_name("all.use-ip4-root-hints");
        _basic_config.set_value("true");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_6);
        _basic_config.set_name("all.use-ip6-root-hints");
        _basic_config.set_value("false");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_7);
        _basic_config.set_name("all.cache-garbage-collect-ms");
        _basic_config.set_value("60000");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_8);
        _basic_config.set_name("all.cache-max-referral-rrs");
        _basic_config.set_value("10000");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_9);
        _basic_config.set_name("all.cache-max-answer-rrs");
        _basic_config.set_value("10000");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_10);
        _basic_config.set_name("all.seteuid");
        _basic_config.set_value("");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_11);
        _basic_config.set_name("all.setgid");
        _basic_config.set_value("");
        _basic_config.insert_row(conn);
    }
    {
        row_basic_config _basic_config;
        _basic_config.set_config_id(config_id_12);
        _basic_config.set_name("all.chroot");
        _basic_config.set_value("");
        _basic_config.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("dns");
        _server.set_server_id(server_id_1);
        _server.set_transport("udp");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("dns");
        _server.set_server_id(server_id_2);
        _server.set_transport("tcp");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("control");
        _server.set_server_id(server_id_3);
        _server.set_transport("tcp");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("dns");
        _server.set_server_id(server_id_4);
        _server.set_transport("tls");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("dns");
        _server.set_server_id(server_id_5);
        _server.set_transport("https");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server _server;
        _server.set_protocol("ui");
        _server.set_server_id(server_id_6);
        _server.set_transport("tcp");
        _server.set_http2_deflate_table_size(4096);
        _server.set_is_enabled(true);
        _server.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(1053);
        _server_socket_address.set_server_id(server_id_1);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_1);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(1053);
        _server_socket_address.set_server_id(server_id_1);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_2);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(1053);
        _server_socket_address.set_server_id(server_id_2);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_3);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(1053);
        _server_socket_address.set_server_id(server_id_2);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_4);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(2000);
        _server_socket_address.set_server_id(server_id_3);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_5);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(2000);
        _server_socket_address.set_server_id(server_id_3);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_6);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(1853);
        _server_socket_address.set_server_id(server_id_4);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_7);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(1853);
        _server_socket_address.set_server_id(server_id_4);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_8);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(1443);
        _server_socket_address.set_server_id(server_id_5);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_9);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(1443);
        _server_socket_address.set_server_id(server_id_5);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_10);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("0.0.0.0");
        _server_socket_address.set_port(8000);
        _server_socket_address.set_server_id(server_id_6);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_11);
        _server_socket_address.insert_row(conn);
    }
    {
        row_server_socket_address _server_socket_address;
        _server_socket_address.set_ip_address("::");
        _server_socket_address.set_port(8000);
        _server_socket_address.set_server_id(server_id_6);
        _server_socket_address.set_server_socket_address_id(server_socket_address_id_12);
        _server_socket_address.insert_row(conn);
    }
    {
        row_dns_client _dns_client;
        _dns_client.set_client_id(client_id_0);
        _dns_client.set_connect_tcp_timeout_ms(1000);
        _dns_client.set_num_parallel_udp(2);
        _dns_client.set_read_tcp_timeout_ms(1000);
        _dns_client.set_server_port(53);
        _dns_client.set_total_timeout_ms(5000);
        _dns_client.set_udp_timeout_ms(2500);
        _dns_client.set_use_ip4(1);
        _dns_client.set_use_ip6(0);
        _dns_client.set_use_tcp(1);
        _dns_client.set_use_udp(1);
        _dns_client.set_wait_udp_response_ms(1000);
        _dns_client.set_write_tcp_timeout_ms(1000);
        _dns_client.insert_row(conn);
    }
    {
        row_dns_client _dns_client;
        _dns_client.set_client_id(client_id_1);
        _dns_client.set_connect_tcp_timeout_ms(1000);
        _dns_client.set_num_parallel_udp(2);
        _dns_client.set_read_tcp_timeout_ms(1000);
        _dns_client.set_server_port(53);
        _dns_client.set_total_timeout_ms(5000);
        _dns_client.set_udp_timeout_ms(2500);
        _dns_client.set_use_ip4(1);
        _dns_client.set_use_ip6(0);
        _dns_client.set_use_tcp(1);
        _dns_client.set_use_udp(1);
        _dns_client.set_wait_udp_response_ms(1000);
        _dns_client.set_write_tcp_timeout_ms(1000);
        _dns_client.insert_row(conn);
    }
    {
        row_dns_client _dns_client;
        _dns_client.set_client_id(client_id_2);
        _dns_client.set_connect_tcp_timeout_ms(1000);
        _dns_client.set_num_parallel_udp(2);
        _dns_client.set_read_tcp_timeout_ms(1000);
        _dns_client.set_server_port(53);
        _dns_client.set_total_timeout_ms(5000);
        _dns_client.set_udp_timeout_ms(2500);
        _dns_client.set_use_ip4(1);
        _dns_client.set_use_ip6(0);
        _dns_client.set_use_tcp(1);
        _dns_client.set_use_udp(1);
        _dns_client.set_wait_udp_response_ms(1000);
        _dns_client.set_write_tcp_timeout_ms(1000);
        _dns_client.insert_row(conn);
    }
    {
        row_dns_client _dns_client;
        _dns_client.set_client_id(client_id_3);
        _dns_client.set_connect_tcp_timeout_ms(1000);
        _dns_client.set_num_parallel_udp(2);
        _dns_client.set_read_tcp_timeout_ms(1000);
        _dns_client.set_server_port(53);
        _dns_client.set_total_timeout_ms(5000);
        _dns_client.set_udp_timeout_ms(2500);
        _dns_client.set_use_ip4(1);
        _dns_client.set_use_ip6(0);
        _dns_client.set_use_tcp(1);
        _dns_client.set_use_udp(1);
        _dns_client.set_wait_udp_response_ms(1000);
        _dns_client.set_write_tcp_timeout_ms(1000);
        _dns_client.insert_row(conn);
    }
    {
        row_dns_client _dns_client;
        _dns_client.set_client_id(client_id_4);
        _dns_client.set_connect_tcp_timeout_ms(1000);
        _dns_client.set_num_parallel_udp(2);
        _dns_client.set_read_tcp_timeout_ms(1000);
        _dns_client.set_server_port(53);
        _dns_client.set_total_timeout_ms(5000);
        _dns_client.set_udp_timeout_ms(2500);
        _dns_client.set_use_ip4(1);
        _dns_client.set_use_ip6(0);
        _dns_client.set_use_tcp(1);
        _dns_client.set_use_udp(1);
        _dns_client.set_wait_udp_response_ms(1000);
        _dns_client.set_write_tcp_timeout_ms(1000);
        _dns_client.insert_row(conn);
    }
    {
        row_cache_config _cache_config;
        _cache_config.set_cache_config_id(cache_config_id_0);
        _cache_config.set_client_id(client_id_0);
        _cache_config.set_default_ttl(300);
        _cache_config.set_cache_garbage_collect_ms(60000);
        _cache_config.set_cache_max_referral_rrs(10000);
        _cache_config.set_cache_max_answer_rrs(10000);
        _cache_config.insert_row(conn);
    }
    {
        row_dns_server _dns_server;
        _dns_server.set_allowed_connection_backlog(10);
        _dns_server.set_client_id(client_id_1);
        _dns_server.set_max_external_resolutions(30);
        _dns_server.set_max_in_message_queue_length(10000);
        _dns_server.set_max_out_message_queue_length(10000);
        _dns_server.set_max_queued_per_question(10000);
        _dns_server.set_max_recursion_depth(20);
        _dns_server.set_min_cache_ttl(5);
        _dns_server.set_num_forwarding_threads(8);
        _dns_server.set_num_receive_threads(1);
        _dns_server.set_num_send_threads(1);
        _dns_server.set_num_tcp_recursive_slots(10);
        _dns_server.set_num_tcp_threads(8);
        _dns_server.set_num_udp_recursive_slots(100);
        _dns_server.set_num_udp_threads(2);
        _dns_server.set_recursive_timeout_ms(15000);
        _dns_server.set_server_id(server_id_1);
        _dns_server.set_tcp_max_body_wait_ms(5000);
        _dns_server.set_tcp_max_len_wait_ms(60000);
        _dns_server.set_udp_reply_timeout_ms(1000);
        _dns_server.set_udp_retry_count(3);
        _dns_server.set_doh_client_timeout_ms(5000);
        _dns_server.set_maximum_http_request_size(4000);
        _dns_server.set_doh_path("/dns-query");
        _dns_server.insert_row(conn);
    }
    {
        row_dns_server _dns_server;
        _dns_server.set_allowed_connection_backlog(10);
        _dns_server.set_client_id(client_id_2);
        _dns_server.set_max_external_resolutions(30);
        _dns_server.set_max_in_message_queue_length(10000);
        _dns_server.set_max_out_message_queue_length(10000);
        _dns_server.set_max_queued_per_question(10000);
        _dns_server.set_max_recursion_depth(20);
        _dns_server.set_min_cache_ttl(5);
        _dns_server.set_num_forwarding_threads(8);
        _dns_server.set_num_receive_threads(1);
        _dns_server.set_num_send_threads(1);
        _dns_server.set_num_tcp_recursive_slots(10);
        _dns_server.set_num_tcp_threads(8);
        _dns_server.set_num_udp_recursive_slots(100);
        _dns_server.set_num_udp_threads(1);
        _dns_server.set_recursive_timeout_ms(15000);
        _dns_server.set_server_id(server_id_2);
        _dns_server.set_tcp_max_body_wait_ms(5000);
        _dns_server.set_tcp_max_len_wait_ms(60000);
        _dns_server.set_udp_reply_timeout_ms(1000);
        _dns_server.set_udp_retry_count(3);
        _dns_server.set_doh_client_timeout_ms(5000);
        _dns_server.set_maximum_http_request_size(4000);
        _dns_server.set_doh_path("/dns-query");
        _dns_server.insert_row(conn);
    }
    {
        row_dns_server _dns_server;
        _dns_server.set_allowed_connection_backlog(10);
        _dns_server.set_client_id(client_id_3);
        _dns_server.set_max_external_resolutions(30);
        _dns_server.set_max_in_message_queue_length(10000);
        _dns_server.set_max_out_message_queue_length(10000);
        _dns_server.set_max_queued_per_question(10000);
        _dns_server.set_max_recursion_depth(20);
        _dns_server.set_min_cache_ttl(5);
        _dns_server.set_num_forwarding_threads(8);
        _dns_server.set_num_receive_threads(1);
        _dns_server.set_num_send_threads(1);
        _dns_server.set_num_tcp_recursive_slots(10);
        _dns_server.set_num_tcp_threads(8);
        _dns_server.set_num_udp_recursive_slots(100);
        _dns_server.set_num_udp_threads(1);
        _dns_server.set_recursive_timeout_ms(15000);
        _dns_server.set_server_id(server_id_4);
        _dns_server.set_tcp_max_body_wait_ms(5000);
        _dns_server.set_tcp_max_len_wait_ms(60000);
        _dns_server.set_udp_reply_timeout_ms(1000);
        _dns_server.set_udp_retry_count(3);
        _dns_server.set_doh_client_timeout_ms(5000);
        _dns_server.set_maximum_http_request_size(4000);
        _dns_server.set_doh_path("/dns-query");
        _dns_server.insert_row(conn);
    }
    {
        row_dns_server _dns_server;
        _dns_server.set_allowed_connection_backlog(10);
        _dns_server.set_client_id(client_id_4);
        _dns_server.set_max_external_resolutions(30);
        _dns_server.set_max_in_message_queue_length(10000);
        _dns_server.set_max_out_message_queue_length(10000);
        _dns_server.set_max_queued_per_question(10000);
        _dns_server.set_max_recursion_depth(20);
        _dns_server.set_min_cache_ttl(5);
        _dns_server.set_num_forwarding_threads(8);
        _dns_server.set_num_receive_threads(1);
        _dns_server.set_num_send_threads(1);
        _dns_server.set_num_tcp_recursive_slots(10);
        _dns_server.set_num_tcp_threads(8);
        _dns_server.set_num_udp_recursive_slots(100);
        _dns_server.set_num_udp_threads(1);
        _dns_server.set_recursive_timeout_ms(15000);
        _dns_server.set_server_id(server_id_5);
        _dns_server.set_tcp_max_body_wait_ms(5000);
        _dns_server.set_tcp_max_len_wait_ms(60000);
        _dns_server.set_udp_reply_timeout_ms(1000);
        _dns_server.set_udp_retry_count(3);
        _dns_server.set_doh_client_timeout_ms(5000);
        _dns_server.set_maximum_http_request_size(4000);
        _dns_server.set_doh_path("/dns-query");
        _dns_server.insert_row(conn);
    }
    {
        row_control_server _control_server;
        _control_server.set_address_list_id(address_list_id_1);
        _control_server.set_allowed_connection_backlog(10);
        _control_server.set_client_connection_timeout_ms(30000);
        _control_server.set_maximum_payload_size(1000000);
        _control_server.set_num_threads(2);
        _control_server.set_server_id(server_id_3);
        _control_server.set_use_ssl(1);
        _control_server.insert_row(conn);
    }
    {
        row_ui_server _ui_server;
        _ui_server.set_address_list_id(address_list_id_1);
        _ui_server.set_allowed_connection_backlog(10);
        _ui_server.set_client_connection_timeout_ms(30000);
        _ui_server.set_num_threads(2);
        _ui_server.set_server_id(server_id_6);
        _ui_server.set_use_ssl(0);
        _ui_server.set_document_root("ui/html");
        _ui_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("198.41.0.4");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("a.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_1);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.228.79.201");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("b.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_2);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.33.4.12");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("c.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_3);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("199.7.91.13");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("d.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_4);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.203.230.10");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("e.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_5);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.5.5.241");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("f.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_6);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.112.36.4");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("g.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_7);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("128.63.2.53");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("h.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_8);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.36.148.17");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("i.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_9);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("192.58.128.30");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("j.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_10);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("193.0.14.129");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("k.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_11);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("199.7.83.42");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("l.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_12);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("202.12.27.33");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("m.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_13);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:503:ba3e::2:30");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("a.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_14);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:84::b");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("b.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_15);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:2::c");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("c.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_16);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:2d::d");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("d.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_17);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:2f::f");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("f.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_18);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:1::803f:235");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("h.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_19);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:7fe::53");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("i.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_20);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:503:c27::2:30");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("j.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_21);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:7fd::1");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("k.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_22);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:500:3::42");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("l.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_23);
        _root_server.insert_row(conn);
    }
    {
        row_root_server _root_server;
        _root_server.set_addr_ttl(600000);
        _root_server.set_ip_address("2001:dc3::35");
        _root_server.set_last_contact_date_time(datetime("2015-09-07 21:00:00"));
        _root_server.set_name("m.root-servers.net");
        _root_server.set_ns_ttl(600000);
        _root_server.set_root_server_id(root_server_id_24);
        _root_server.insert_row(conn);
    }
    {
        row_horizon _horizon;
        _horizon.set_address_list_id(address_list_id_1);
        _horizon.set_allow_recursion(1);
        _horizon.set_horizon_id(horizon_id_1);
        _horizon.set_check_order(1);
        _horizon.insert_row(conn);
    }

}
