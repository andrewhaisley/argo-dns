// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * autogenerated by dbgen.py at 11:00AM on October 26, 2025, do not hand edit
 */

#include <boost/uuid/uuid_generators.hpp>

#include "row_control_server.hpp"

using namespace adns;
using namespace db;
using namespace std;

mutex row_control_server::o_lock;
vector<column> row_control_server::o_columns;
atomic<bool> row_control_server::o_initialised(false);
column row_control_server::o_primary_key;
vector<foreign_key> row_control_server::o_foreign_keys;

static row_control_server instance;

static shared_ptr<row_control_server> convert_row_type(row *r)
{
    return shared_ptr<row_control_server>(static_cast<row_control_server*>(r));
}

static vector<shared_ptr<row_control_server>> convert_row_type(vector<row *> vr)
{
    vector<shared_ptr<row_control_server>> res(vr.size());
    for (size_t i = 0; i < vr.size(); i++)
    {
        res[i] = shared_ptr<row_control_server>(static_cast<row_control_server*>(vr[i]));
    }
    return res;
}

    
row_control_server::row_control_server()
{
    m_allowed_connection_backlog = 0;
    m_client_connection_timeout_ms = 0;
    m_maximum_payload_size = 0;
    m_num_threads = 0;
    m_use_ssl = false;
}

row_control_server::~row_control_server()
{
}

vector<shared_ptr<row_control_server>> row_control_server::get_rows(connection &conn)
{
    return convert_row_type(instance.fetch_rows(conn));
}

string row_control_server::get_table_name() const
{
    return "control_server";
}

table::table_t row_control_server::get_table_id() const
{
    return table::control_server_e;
}

row *row_control_server::create_instance() const
{
    return new row_control_server();
}

void row_control_server::set_column_value(const column &c, int value)
{
    (void)value;
    THROW(row_exception, "no columns of type int found", c.get_position());
}

void row_control_server::set_column_value(const column &c, bool value)
{
    switch (c.get_position())
    {
    case 7:
        m_use_ssl = value;
        break;
    default:
        THROW(row_exception, "no columns of type bool found at position", c.get_position());
    }
}

void row_control_server::set_column_value(const column &c, uint value)
{
    switch (c.get_position())
    {
    case 2:
        m_allowed_connection_backlog = value;
        break;
    case 3:
        m_client_connection_timeout_ms = value;
        break;
    case 4:
        m_maximum_payload_size = value;
        break;
    case 5:
        m_num_threads = value;
        break;
    default:
        THROW(row_exception, "no columns of type uint found at position", c.get_position());
    }
}

void row_control_server::set_column_value(const column &c, octet value)
{
    (void)value;
    THROW(row_exception, "no columns of type octet found", c.get_position());
}

void row_control_server::set_column_value(const column &c, uuid value)
{
    switch (c.get_position())
    {
    case 1:
        m_address_list_id = value;
        break;
    case 6:
        m_server_id = value;
        break;
    default:
        THROW(row_exception, "no columns of type uuid found at position", c.get_position());
    }
}

void row_control_server::set_column_value(const column &c, const string &value)
{
    (void)value;
    THROW(row_exception, "no columns of type string found", c.get_position());
}

void row_control_server::set_column_value(const column &c, const datetime &value)
{
    (void)value;
    THROW(row_exception, "no columns of type datetime found", c.get_position());
}

void row_control_server::set_column_value(const column &c, const buffer &value)
{
    (void)value;
    THROW(row_exception, "no columns of type buffer found", c.get_position());
}

void row_control_server::set_column_value(const column &c, nullable<int> value)
{
    (void)value;
    THROW(row_exception, "no columns of type int found", c.get_position());
}

void row_control_server::set_column_value(const column &c, nullable<bool> value)
{
    (void)value;
    THROW(row_exception, "no columns of type bool found", c.get_position());
}

void row_control_server::set_column_value(const column &c, nullable<uint> value)
{
    (void)value;
    THROW(row_exception, "no columns of type uint found", c.get_position());
}

void row_control_server::set_column_value(const column &c, nullable<octet> value)
{
    (void)value;
    THROW(row_exception, "no columns of type octet found", c.get_position());
}

void row_control_server::set_column_value(const column &c, nullable<uuid> value)
{
    (void)value;
    THROW(row_exception, "no columns of type uuid found", c.get_position());
}

void row_control_server::set_column_value(const column &c, const nullable<string> &value)
{
    (void)value;
    THROW(row_exception, "no columns of type string found", c.get_position());
}

void row_control_server::set_column_value(const column &c, const nullable<datetime> &value)
{
    (void)value;
    THROW(row_exception, "no columns of type datetime found", c.get_position());
}

void row_control_server::set_column_value(const column &c, const nullable<buffer> &value)
{
    (void)value;
    THROW(row_exception, "no columns of type buffer found", c.get_position());
}

int row_control_server::get_int_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type int found", c.get_name(), c.get_position());
}

bool row_control_server::get_bool_column_value(const column &c) const
{
    switch (c.get_position())
    {
    case 7:
        return m_use_ssl;
    default:
        THROW(row_exception, "no columns of type bool found at position", c.get_name(), c.get_position());
    }
}

uint row_control_server::get_uint_column_value(const column &c) const
{
    switch (c.get_position())
    {
    case 2:
        return m_allowed_connection_backlog;
    case 3:
        return m_client_connection_timeout_ms;
    case 4:
        return m_maximum_payload_size;
    case 5:
        return m_num_threads;
    default:
        THROW(row_exception, "no columns of type uint found at position", c.get_name(), c.get_position());
    }
}

octet row_control_server::get_octet_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type octet found", c.get_name(), c.get_position());
}

uuid row_control_server::get_uuid_column_value(const column &c) const
{
    switch (c.get_position())
    {
    case 1:
        return m_address_list_id;
    case 6:
        return m_server_id;
    default:
        THROW(row_exception, "no columns of type uuid found at position", c.get_name(), c.get_position());
    }
}

const string &row_control_server::get_string_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type string found", c.get_name(), c.get_position());
}

const datetime &row_control_server::get_datetime_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type datetime found", c.get_name(), c.get_position());
}

const buffer &row_control_server::get_buffer_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type buffer found", c.get_name(), c.get_position());
}

nullable<int> row_control_server::get_nullable_int_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type int found", c.get_name(), c.get_position());
}

nullable<bool> row_control_server::get_nullable_bool_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type bool found", c.get_name(), c.get_position());
}

nullable<uint> row_control_server::get_nullable_uint_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type uint found", c.get_name(), c.get_position());
}

nullable<octet> row_control_server::get_nullable_octet_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type octet found", c.get_name(), c.get_position());
}

nullable<uuid> row_control_server::get_nullable_uuid_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type uuid found", c.get_name(), c.get_position());
}

const nullable<string> &row_control_server::get_nullable_string_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type string found", c.get_name(), c.get_position());
}

const nullable<datetime> &row_control_server::get_nullable_datetime_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type datetime found", c.get_name(), c.get_position());
}

const nullable<buffer> &row_control_server::get_nullable_buffer_column_value(const column &c) const
{
    THROW(row_exception, "no columns of type buffer found", c.get_name(), c.get_position());
}

const vector<column> &row_control_server::get_columns() const
{
    init_static();
    return o_columns;
}

const vector<foreign_key> &row_control_server::get_foreign_keys() const
{
    init_static();
    return o_foreign_keys;
}

const column &row_control_server::get_primary_key() const
{
    init_static();
    return o_primary_key;
}

uuid row_control_server::get_primary_key_value() const
{
    return get_uuid_column_value(get_primary_key());
}

void row_control_server::init_static()
{
    if (!o_initialised)
    {
        lock_guard<mutex> guard(o_lock);
        if (!o_initialised)
        {
            o_columns.push_back(column(column::uuid_e, "address_list_id", 1, false));
            o_columns.push_back(column(column::uint_e, "allowed_connection_backlog", 2, false));
            o_columns.push_back(column(column::uint_e, "client_connection_timeout_ms", 3, false));
            o_columns.push_back(column(column::uint_e, "maximum_payload_size", 4, false));
            o_columns.push_back(column(column::uint_e, "num_threads", 5, false));
            o_columns.push_back(column(column::uuid_e, "server_id", 6, false));
            o_primary_key = column(column::uuid_e, "server_id", 6, false);
            o_columns.push_back(column(column::bool_e, "use_ssl", 7, false));
            
            o_initialised = true;
        }
    }
}

shared_ptr<row_control_server> row_control_server::get_by_server_id(connection &c, uuid server_id)
{
    init_static();
    return convert_row_type(instance.fetch_row(c, o_columns[5], server_id));
}

vector<shared_ptr<row_control_server>> row_control_server::get_by_address_list_id(connection &c, uuid address_list_id)
{
    init_static();
    return convert_row_type(instance.fetch_rows(c, o_columns[0], address_list_id));
}



void row_control_server::delete_by_server_id(connection &c, uuid server_id)
{
    init_static();
    instance.delete_rows(c, o_columns[5], server_id);
}

void row_control_server::delete_by_address_list_id(connection &c, uuid address_list_id)
{
    init_static();
    instance.delete_rows(c, o_columns[0], address_list_id);
}



uuid row_control_server::get_address_list_id() const
{
    return m_address_list_id;
}

uint row_control_server::get_allowed_connection_backlog() const
{
    return m_allowed_connection_backlog;
}

uint row_control_server::get_client_connection_timeout_ms() const
{
    return m_client_connection_timeout_ms;
}

uint row_control_server::get_maximum_payload_size() const
{
    return m_maximum_payload_size;
}

uint row_control_server::get_num_threads() const
{
    return m_num_threads;
}

uuid row_control_server::get_server_id() const
{
    return m_server_id;
}

bool row_control_server::get_use_ssl() const
{
    return m_use_ssl;
}



void row_control_server::set_address_list_id(uuid v)
{
    m_address_list_id = v;
}

void row_control_server::set_allowed_connection_backlog(uint v)
{
    m_allowed_connection_backlog = v;
}

void row_control_server::set_client_connection_timeout_ms(uint v)
{
    m_client_connection_timeout_ms = v;
}

void row_control_server::set_maximum_payload_size(uint v)
{
    m_maximum_payload_size = v;
}

void row_control_server::set_num_threads(uint v)
{
    m_num_threads = v;
}

void row_control_server::set_server_id(uuid v)
{
    m_server_id = v;
}

void row_control_server::set_use_ssl(bool v)
{
    m_use_ssl = v;
}


