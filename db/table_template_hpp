// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * autogenerated by dbgen.py at %%DATETIME%%, do not hand edit
 */

#pragma once

#include <map>
#include <list>
#include <string>

#include "types.hpp"
#include "connection.hpp"

namespace adns
{
    namespace db
    {
        /**
         * db table metadata
         */
        class table
        {
        public:

            typedef enum
            {
%%TABLES%%
            }
            table_t;

            // get a list of SQL strings to create DB tables for the relevant DB type (null op for some
            // DB types - e.g. MongoDB).
            static std::list<std::pair<table_t, std::string>> get_table_sql(type_t);

            // get a list of SQL strings to create DB indexes for the relevant DB type (null op for some
            // DB types - e.g. MongoDB).
            static std::list<std::pair<table_t, std::list<std::string>>> get_index_sql(type_t);

            // get a list of SQL strings to create DB foreign keys for the relevant DB type (null op for some
            // DB types - e.g. MongoDB).
            static std::list<std::pair<table_t, std::list<std::string>>> get_foreign_key_sql(type_t);

            // create static data needed for a base install 
            static void create_static(connection &conn);

        private:

            static std::map<type_t, std::list<std::pair<table_t, std::string>>> o_table_sql;
            static std::map<type_t, std::list<std::pair<table_t, std::list<std::string>>>> o_index_sql;
            static std::map<type_t, std::list<std::pair<table_t, std::list<std::string>>>> o_fk_sql;
        };
    }
}
