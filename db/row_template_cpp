// 
// Copyright 2025 Andrew Haisley
// 
// This program is free software: you can redistribute it and/or modify it under the terms 
// of the GNU General Public License as published by the Free Software Foundation, either 
// version 3 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program. 
// If not, see https://www.gnu.org/licenses/.
// 
/**
 * autogenerated by dbgen.py at %%DATETIME%%, do not hand edit
 */

#include <boost/uuid/uuid_generators.hpp>

#include "%%CLASS%%.hpp"

using namespace adns;
using namespace db;
using namespace std;

mutex %%CLASS%%::o_lock;
vector<column> %%CLASS%%::o_columns;
atomic<bool> %%CLASS%%::o_initialised(false);
column %%CLASS%%::o_primary_key;
vector<foreign_key> %%CLASS%%::o_foreign_keys;

static %%CLASS%% instance;

static shared_ptr<%%CLASS%%> convert_row_type(row *r)
{
    return shared_ptr<%%CLASS%%>(static_cast<%%CLASS%%*>(r));
}

static vector<shared_ptr<%%CLASS%%>> convert_row_type(vector<row *> vr)
{
    vector<shared_ptr<%%CLASS%%>> res(vr.size());
    for (size_t i = 0; i < vr.size(); i++)
    {
        res[i] = shared_ptr<%%CLASS%%>(static_cast<%%CLASS%%*>(vr[i]));
    }
    return res;
}

    
%%CLASS%%::%%CLASS%%()
{
%%CONSTRUCTOR%%
}

%%CLASS%%::~%%CLASS%%()
{
}

vector<shared_ptr<%%CLASS%%>> %%CLASS%%::get_rows(connection &conn)
{
    return convert_row_type(instance.fetch_rows(conn));
}

string %%CLASS%%::get_table_name() const
{
    return "%%TABLE_NAME%%";
}

table::table_t %%CLASS%%::get_table_id() const
{
    return table::%%TABLE_NAME%%_e;
}

row *%%CLASS%%::create_instance() const
{
    return new %%CLASS%%();
}

void %%CLASS%%::set_column_value(const column &c, int value)
{
%%SET_INT_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, bool value)
{
%%SET_BOOL_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, uint value)
{
%%SET_UNSIGNED_INT_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, octet value)
{
%%SET_OCTET_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, uuid value)
{
%%SET_UUID_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const string &value)
{
%%SET_STRING_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const datetime &value)
{
%%SET_DATETIME_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const buffer &value)
{
%%SET_BUFFER_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, nullable<int> value)
{
%%SET_NULLABLE_INT_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, nullable<bool> value)
{
%%SET_NULLABLE_BOOL_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, nullable<uint> value)
{
%%SET_NULLABLE_UNSIGNED_INT_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, nullable<octet> value)
{
%%SET_NULLABLE_OCTET_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, nullable<uuid> value)
{
%%SET_NULLABLE_UUID_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const nullable<std::string> &value)
{
%%SET_NULLABLE_STRING_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const nullable<datetime> &value)
{
%%SET_NULLABLE_DATETIME_COLUMN%%
}

void %%CLASS%%::set_column_value(const column &c, const nullable<buffer> &value)
{
%%SET_NULLABLE_BUFFER_COLUMN%%
}

int %%CLASS%%::get_int_column_value(const column &c) const
{
%%GET_INT_COLUMN%%
}

bool %%CLASS%%::get_bool_column_value(const column &c) const
{
%%GET_BOOL_COLUMN%%
}

uint %%CLASS%%::get_uint_column_value(const column &c) const
{
%%GET_UNSIGNED_INT_COLUMN%%
}

octet %%CLASS%%::get_octet_column_value(const column &c) const
{
%%GET_OCTET_COLUMN%%
}

uuid %%CLASS%%::get_uuid_column_value(const column &c) const
{
%%GET_UUID_COLUMN%%
}

const string &%%CLASS%%::get_string_column_value(const column &c) const
{
%%GET_STRING_COLUMN%%
}

const datetime &%%CLASS%%::get_datetime_column_value(const column &c) const
{
%%GET_DATETIME_COLUMN%%
}

const buffer &%%CLASS%%::get_buffer_column_value(const column &c) const
{
%%GET_BUFFER_COLUMN%%
}

nullable<int> %%CLASS%%::get_nullable_int_column_value(const column &c) const
{
%%GET_NULLABLE_INT_COLUMN%%
}

nullable<bool> %%CLASS%%::get_nullable_bool_column_value(const column &c) const
{
%%GET_NULLABLE_BOOL_COLUMN%%
}

nullable<uint> %%CLASS%%::get_nullable_uint_column_value(const column &c) const
{
%%GET_NULLABLE_UNSIGNED_INT_COLUMN%%
}

nullable<octet> %%CLASS%%::get_nullable_octet_column_value(const column &c) const
{
%%GET_NULLABLE_OCTET_COLUMN%%
}

nullable<uuid> %%CLASS%%::get_nullable_uuid_column_value(const column &c) const
{
%%GET_NULLABLE_UUID_COLUMN%%
}

const nullable<std::string> &%%CLASS%%::get_nullable_string_column_value(const column &c) const
{
%%GET_NULLABLE_STRING_COLUMN%%
}

const nullable<datetime> &%%CLASS%%::get_nullable_datetime_column_value(const column &c) const
{
%%GET_NULLABLE_DATETIME_COLUMN%%
}

const nullable<buffer> &%%CLASS%%::get_nullable_buffer_column_value(const column &c) const
{
%%GET_NULLABLE_BUFFER_COLUMN%%
}

const vector<column> &%%CLASS%%::get_columns() const
{
    init_static();
    return o_columns;
}

const vector<foreign_key> &%%CLASS%%::get_foreign_keys() const
{
    init_static();
    return o_foreign_keys;
}

const column &%%CLASS%%::get_primary_key() const
{
    init_static();
    return o_primary_key;
}

uuid %%CLASS%%::get_primary_key_value() const
{
    return get_uuid_column_value(get_primary_key());
}

void %%CLASS%%::init_static()
{
    if (!o_initialised)
    {
        lock_guard<mutex> guard(o_lock);
        if (!o_initialised)
        {
%%INIT_COLUMNS%%
%%INIT_FOREIGN_KEYS%%
            o_initialised = true;
        }
    }
}

%%GET_BY_METHODS%%

%%DELETE_BY_METHODS%%

%%GET_METHODS%%

%%SET_METHODS%%
